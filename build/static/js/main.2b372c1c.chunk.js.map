{"version":3,"sources":["components/URLList.js","components/URL.js","data/Rolex_URL_working_copy.csv","components/FilterableURLList.js","App.js","reportWebVitals.js","index.js"],"names":["URLs","fetch","require","sslCertificate","cnameErrorMessage","serverUnknownMessage","URL","props","state","sgtin","getRandomSGTIN","url","domain","this","update","cname","getDNSDetails","length","hasCharacters","result","characters","charactersLength","i","charAt","Math","floor","random","_randomstring","includes","replace","a","Promise","resolve","reject","_removeDomainProtocol","console","log","then","res","json","Answer","data","catch","err","get","certificate","valid_to","fullURL","method","dnsExist","setState","cnameMapping","server","parentCallback","tdCnameClass","cnameCell","className","site","environment","SSLExpiryDate","redirectWithoutSGTIN","redirectWithSGTIN","React","Component","URLList","updatesNumber","childData","readCSV","urls","CSV","response","text","Papa","parse","header","skipEmptyLines","getURLs","siteFilter","Brand","toLowerCase","environmentFilter","Environment","domainFilter","Row","Col","sm","domains","listUrls","map","URLisFiltered","handleCallback","FilterableURLList","handleURLsVerifications","bind","handleFilterSiteChange","handleFilterEnvironmentChange","handleFilterDomainChange","handleFilterCnameChange","e","target","value","cnameFilter","Button","variant","onClick","Table","striped","bordered","hover","responsive","size","Form","Control","type","placeholder","onChange","App","rolexURL","Container","fluid","Navbar","expand","bg","href","ReactDOM","render","document","getElementById","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.2b372c1c.chunk.js","sourcesContent":["import React from \"react\";\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Papa from 'papaparse';\nimport URL from './URL';\n// import CSV from \"../data/urls.csv\";\nimport CSV from \"../data/Rolex_URL_working_copy.csv\";\nimport cnameMapping from \"../data/cname_mapping.json\";\n\nconst fetch = require('node-fetch');\nvar URLs;\n\nclass URLList extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    //  this.state.urls[0] = {'domain': \"https://qru.aptamilessensis.com\", \"update\": false};\n    //  this.state.urls[1] = {'domain': \"https://qr.aptaclub.de\", \"update\": false};\n    //  this.state.urls[2] = {'domain': \"https://qrG.aptaclub.de\", \"update\": false};\n    this.state = {\n     updatesNumber: 0\n    }\n  }\n\n  handleCallback(childData) {\n    console.log(\"child communication received\", childData);\n    // var newUpdates;\n    // if (this.state && 'updatesNumber' in this.state) {\n    //   newUpdates = this.state.updatesNumber+1;\n    // } else {\n    //   newUpdates = 1;\n    // }\n    // this.setState({\n    //   updatesNumber: newUpdates\n    // });\n  }\n\n  async getURLs() {\n  \t// if (URLs && URLs.length > 0) {\n  \t// \treturn URLs;\n  \t// }\n  \tURLs = await this.readCSV();\n  \tfor (var i = 0; i < URLs.length; i++) {\n  \t\tURLs[i].update = false;\n  \t}\n\n    this.setState({\n    \turls: URLs\n    });\n  }\n\n  async readCSV() {\n  \treturn fetch(CSV)\n  \t  .then((response) => {\n  \t  \treturn response.text();\n  \t  })\n  \t  .then(text => {\n\t\t  \tvar results = Papa.parse(text, { header: true, skipEmptyLines: true }); // object with { data, errors, meta }\n  \t\t  var rows = results.data; // array of objects\n  \t\t  // console.log(\"Results, rows\", results, rows);\n  \t\t  return rows;\n  \t  });\n  }\n\n  componentDidMount() {\n    this.getURLs();\n  }\n\n  // componentDidUpdate() {\n  //   this.getURLs();\n  // }\n\n  URLisFiltered(domain) {\n    if (this.props.siteFilter.length > 0 && !(domain.Brand.toLowerCase().includes(this.props.siteFilter.toLowerCase()))) {\n      return true;\n    }\n    if (this.props.environmentFilter.length > 0 && !(domain.Environment.toLowerCase().includes(this.props.environmentFilter.toLowerCase()))) {\n      return true;\n    }\n    if (this.props.domainFilter.length > 0 && !(domain.URL.toLowerCase().includes(this.props.domainFilter.toLowerCase()))) {\n      return true;\n    }\n    // if (this.props.cnameFilter.length > 0 && !(domain.cname.toLowerCase().includes(this.props.cnameFilter.toLowerCase()))) {\n    //   return true;\n    // }\n\n    return false;\n  }\n\n  render() {\n  \tif (!this.state || !(\"urls\" in this.state) || this.state.urls.length < 1) {\n  \t\treturn (\n  \t\t\t<Row>\n\t  \t\t\t<Col sm={4}>\n\t  \t\t\t\tNo URLs provided.\n\t  \t\t\t</Col>\n\t  \t\t</Row>\n  \t\t);\n  \t}\n  \tvar domains = this.state.urls;\n\n\n    var numberOfURLsDisplayed = 0;\n  \tconst listUrls = domains.map((domain) => {\n      if (this.URLisFiltered(domain)) {\n        return null;\n      }\n      numberOfURLsDisplayed++;\n  \t  return <URL key={domain.URL} \n\t\t\t\t  \t  \t\tsite={domain.Brand} \n\t\t\t\t  \t  \t\tenvironment={domain.Environment} \n\t\t\t\t  \t  \t\tdomain={domain.URL} \n                  cnameMapping={cnameMapping}\n\t\t\t\t  \t  \t\tupdate={this.props.update}\n                  parentCallback={this.handleCallback}\n\t\t  \t  \t\t/>\n  \t});\n\n    // console.log(\"number of domains\", numberOfURLsDisplayed);\n\n  \treturn (\n  \t\t<tbody>\n\t     {listUrls}\n\t    </tbody>\n\n\t\t);\n  }\n}\n\nexport default URLList;\n","import React from \"react\";\n\nconst fetch = require('node-fetch');\n// const sslChecker = require(\"ssl-checker\");\n// const checkCertExpiration = require('check-cert-expiration');\nconst sslCertificate = require('get-ssl-certificate-next')\n\n\n// from: https://stackoverflow.com/questions/43262121/trying-to-use-fetch-and-pass-in-mode-no-cors\n// Generated with:\n// \tgit clone https://github.com/Rob--W/cors-anywhere.git\n// \tcd cors-anywhere/\n// \tnpm install\n// \theroku create\n// \tgit push heroku master\n// const CORS_PROXY = 'https://infinite-crag-06340.herokuapp.com/';\n\nconst cnameErrorMessage = \"Doesn't exist\";\nconst serverUnknownMessage = \"Unknown server\";\n\nclass URL extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n    \tsgtin: this.getRandomSGTIN()\n    };\n    this.state = {\n    \turl: props.domain + \"/\" + this.state.sgtin\n    };\n  }\n\n  componentDidMount() {\n  \tif (this.props.update && !this.state.cname) {\n    \tthis.getDNSDetails(this.props.domain);\n  \t}\n  }\n  componentDidUpdate() {\n  \tif (this.props.update && !this.state.cname) {\n    \tthis.getDNSDetails(this.props.domain);\n  \t}\n  }\n\n  _randomstring(length, hasCharacters = true) {\n      var result           = '';\n      var characters       = '0123456789';\n      if (hasCharacters) {\n      \tcharacters += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n      }\n      var charactersLength = characters.length;\n      for ( var i = 0; i < length; i++ ) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n     }\n     return result;\n  }\n\n  getRandomSGTIN() {\n  \t// return '0' + this._randomstring(12, false) + '9' + this._randomstring(11, true);\n  \treturn this._randomstring(3, false);\n  }\n\n  _removeDomainProtocol(domain) {\n  \tif (domain.includes(\"https://\")) {\n  \t\t domain = domain.replace(\"https://\", \"\");\n  \t} else if (domain.includes(\"http://\")) {\n  \t\t domain = domain.replace(\"http://\", \"\");\n  \t} \n  \treturn domain;\n  }\n\n  async dnsExist(domain) {\n  \treturn new Promise((resolve, reject) => {\n\n  \t\tdomain = this._removeDomainProtocol(domain);\n\n  \t\tconsole.log(\"ongoing request\");\n\n  \t\tvar url = 'https://dns.google/resolve?name=' + domain;\n\n  \t\tfetch(url)\n\t\t    .then(res => res.json())\n\t\t    .then(json => {\n\t\t    \tif (json.Answer) {\n\t\t    \t\tvar cname = json.Answer[0].data;\n\t\t\t  \t\tresolve(cname);\n\t\t    \t}\n\t\t    \treject(json);\n\t\t    })\n\t\t    .catch(err => {\n\t\t    \tconsole.log(err);\n\t\t    \treject(err);\n\t\t    });\n  \t});\n  }\n\n  // getSSLExpiryDate(domain) {\n\t\t// domain = this._removeDomainProtocol(domain);\n\t\t// console.log(\"Getting SSL expiry date for \"+domain);\n\t\t// (async function () {\n\t //    try {\n  //       const { valid_to, daysLeft, host, port } = await checkCertExpiration('qru.aptamilessensis.com');\n  //       console.log(`${daysLeft} days until the certificate expires for ${host}:${port}`);\n\t\t// \t\tthis.setState({\n\t\t// \t\t\tSSLExpiryDate: valid_to\n\t\t// \t\t});\n\t\t// \t\treturn valid_to;\n\t //    } catch (err) {\n  //       console.error(`${err.name}:${err.message}`);\n  //       return err;\n\t //    }\n  //   })();\n  // }\n\n  // async getSSLExpiryDate(domain) {\n  // \treturn new Promise((resolve, reject) => {\n  // \t\tdomain = this._removeDomainProtocol(domain);\n  // \t\tconsole.log(\"SSL\",domain);\n  // \t\tsslChecker(domain, { method: \"GET\", port: 443 })\n  // \t\t\t.then((data) => {\n  // \t\t\t\tthis.setState({\n  // \t\t\t\t\tSSLExpiryDate: data.validTo\n  // \t\t\t\t});\n  // \t\t\t\tresolve(data.validTo);\n  // \t\t\t});\n  // \t});\n  // }\n  \n  async getSSLExpiryDate(domain) {\n  \treturn new Promise((resolve, reject) => {\n\t  \t\tdomain = this._removeDomainProtocol(domain);\n\n\t  \t\tsslCertificate.get(domain).then(function (certificate) {\n\t\t\t\t\tresolve(certificate.valid_to);\n\t  \t\t})\n\t  \t\t.catch(err => {\n\t  \t\t\tconsole.log(\"SSL domain for \"+domain, err);\n\t  \t\t\treject(err);\n\t  \t\t});\n\t  });\n\t}\n\n\tasync getRedirect(fullURL) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfetch(fullURL, {\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t})\n\t\t    .then(res => {\n\t\t\t    \tresolve(res.url);\n\t\t    })\n\t\t    .catch(err => {\n\t\t    \tconsole.log(\"getRedirect err\", fullURL, err);\n\t\t    \treject(err);\n\t\t    });\n\t\t});\n\t}\n\n  async getDNSDetails(domain) {\n\n  \ttry {\n  \t\tvar cname = await this.dnsExist(domain);\n  \t\tthis.setState({\n  \t\t\tcname: cname\n  \t\t});\n  \t\tif (this.props.cnameMapping[cname]) {\n  \t\t\tthis.setState({\n  \t\t\t\tserver: this.props.cnameMapping[cname]\n  \t\t\t});\n  \t\t} else {\n  \t\t\tthis.setState({\n  \t\t\t\tserver: serverUnknownMessage\n  \t\t\t});\n  \t\t}\n\n\t\t\t// if (cname) {\n\t  // \t\ttry {\n\t\t //  \t\tvar SSLExpiryDate = await this.getSSLExpiryDate(domain);\n\t\t //  \t\tthis.setState({\n\t\t //  \t\t\tSSLExpiryDate: SSLExpiryDate\n\t\t //  \t\t});\n\t  // \t\t} catch (err) {\n\t  // \t\t\tthis.setState({\n\t  // \t\t\t\tSSLExpiryDate: \"Unable to get SSL\"\n\t  // \t\t\t});\n\t  // \t\t\tconsole.log(domain + \": Error\", err);\n\t  // \t\t}\n\n\t  // \t\ttry {\n\t  // \t\t\t//TODO : test if http/https is there\n\t\t //  \t\tvar redirectWithoutSGTIN = await this.getRedirect(domain);\n\t\t //  \t\tif (redirectWithoutSGTIN === domain+\"/\") {\n\t\t //  \t\t\tredirectWithoutSGTIN = \"No redirection\";\n\t\t //  \t\t}\n\t\t //  \t\tthis.setState({\n\t\t //  \t\t\tredirectWithoutSGTIN: redirectWithoutSGTIN\n\t\t //  \t\t});\n\t  // \t\t} catch (err) {\n\t  // \t\t\tthis.setState({\n\t  // \t\t\t\tredirectWithoutSGTIN: \"Unable to get the redirection\"\n\t  // \t\t\t});\n\t  // \t\t\tconsole.log(domain + \": Error\", err);\n\t  // \t\t}\n\n\t  // \t\ttry {\n\t\t //  \t\t//TODO : test if http/https is there\n\t\t //  \t\tvar redirectWithSGTIN = await this.getRedirect(this.state.url);\n\t\t //  \t\tif (redirectWithSGTIN === this.state.url) {\n\t\t //  \t\t\tredirectWithSGTIN = \"No redirection\";\n\t\t //  \t\t}\n\t\t //  \t\tthis.setState({\n\t\t //  \t\t\tredirectWithSGTIN: redirectWithSGTIN\n\t\t //  \t\t});\n\t  // \t\t} catch (err) {\n\t\t //  \t\tthis.setState({\n\t\t //  \t\t\tredirectWithSGTIN: \"Unable to get the redirection\"\n\t\t //  \t\t});\n\t  // \t\t\tconsole.log(domain + \": Error\", err);\n\t  // \t\t}\n\t  // \t}\n\n  \t} catch (err) {\n  \t\tthis.setState({\n  \t\t\tcname: cnameErrorMessage\n  \t\t});\n  \t\tconsole.log(domain + \": Error\", err);\n  \t}\n\n  \tthis.props.parentCallback(\"Data from child \" + this.props.domain);\n  }\n\n  render() {\n  \tvar domain = this._removeDomainProtocol(this.props.domain);\n\n  \tvar tdCnameClass = \"\";\n  \tif (this.state.server === serverUnknownMessage) {\n  \t\ttdCnameClass = \"warningCell\";\n  \t} \n  \tif (this.state.cname === cnameErrorMessage) {\n  \t\ttdCnameClass = \"errorCell\";\n  \t}\n  \tvar cnameCell = <td className={tdCnameClass} >{this.state.cname}</td>;\n  \tif (\"server\" in this.state) {\n  \t\tcnameCell = <td className={tdCnameClass} >{this.state.cname}<br/>{this.state.server}</td> \n  \t}\n\n  \treturn (\n  \t\t<tr>\n  \t\t\t<td>{this.props.site}</td>\n  \t\t\t<td>{this.props.environment}</td>\n  \t\t\t<td>{domain}</td>\n  \t\t\t{cnameCell}\n  \t\t\t<td>{this.state.SSLExpiryDate}</td>\n  \t\t\t<td>{this.state.redirectWithoutSGTIN}</td>\n  \t\t\t<td>{this.state.redirectWithSGTIN}</td>\n  \t\t</tr>\n\t\t);\n  }\n\n}\n\nexport default URL;\n","export default __webpack_public_path__ + \"static/media/Rolex_URL_working_copy.a3fd6124.csv\";","import React from \"react\";\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Table from 'react-bootstrap/Table';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport URLList from './URLList';\n\nclass FilterableURLList extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.handleURLsVerifications = this.handleURLsVerifications.bind(this);\n    this.handleFilterSiteChange = this.handleFilterSiteChange.bind(this);\n    this.handleFilterEnvironmentChange = this.handleFilterEnvironmentChange.bind(this);\n    this.handleFilterDomainChange = this.handleFilterDomainChange.bind(this);\n    this.handleFilterCnameChange = this.handleFilterCnameChange.bind(this);\n  }\n\n  handleFilterSiteChange(e) {\n  \tthis.setState({\n  \t\tsite: e.target.value\n  \t});\n  }\n  handleFilterEnvironmentChange(e) {\n  \tthis.setState({\n  \t\tenvironment: e.target.value\n  \t});\n  }\n  handleFilterDomainChange(e) {\n  \tthis.setState({\n  \t\tdomain: e.target.value\n  \t});\n  }\n  handleFilterCnameChange(e) {\n  \tthis.setState({\n  \t\tcname: e.target.value\n  \t});\n  }\n\n  componentDidMount() {\n  \tthis.setState({\n  \t\tsite: '',\n  \t\tenvironment: '',\n  \t\tdomain: '',\n  \t\tupdate: false\n  \t});\n  }\n\n  handleURLsVerifications() {\n  \tthis.setState({\n  \t\tupdate: true\n  \t});\n  }\n\n  render() {\n  \tvar siteFilter = '';\n  \tif (this.state != null && 'site' in this.state) {\n  \t\tsiteFilter = this.state.site;\n  \t}\n  \tvar environmentFilter = '';\n  \tif (this.state != null && 'environment' in this.state) {\n  \t\tenvironmentFilter = this.state.environment;\n  \t}\n  \tvar domainFilter = '';\n  \tif (this.state != null && 'domain' in this.state) {\n  \t\tdomainFilter = this.state.domain;\n  \t}\n  \tvar cnameFilter = '';\n  \tif (this.state != null && 'cname' in this.state) {\n  \t\tcnameFilter = this.state.cname;\n  \t}\n  \tvar update = false;\n  \tif (this.state != null && 'update' in this.state) {\n  \t\tupdate = this.state.update;\n  \t}\n\n  \treturn (\n  \t\t<Row>\n\t  \t\t<Col sm={10}>\n\t  \t\t</Col>\n\t  \t\t<Col sm={2}>\n\t\t  \t\t<Button variant=\"primary\" onClick={this.handleURLsVerifications} className=\"mt-2 mb-2\" >Verify the URLs</Button>\n\t  \t\t</Col>\n\n\t  \t\t<Col sm={12} >\n\t  \t\t\t<Table striped bordered hover responsive size=\"sm\" className=\"stubLinks\">\n\t\t  \t\t  <thead>\n\t\t  \t\t  <tr>\n\t\t\t  \t\t  <td>Site</td>\n\t\t\t  \t\t  <td>Environment</td>\n\t\t\t  \t\t  <td>Domain</td>\n\t\t\t  \t\t  <td>CNAME</td>\n\t\t\t  \t\t  <td>SSL expiry date</td>\n\t\t\t  \t\t  <td>Redirect without SGTIN</td>\n\t\t\t  \t\t  <td>Redirect with SGTIN</td>\n\t\t  \t\t  </tr>\n\t\t  \t\t  <tr>\n\t\t\t  \t\t  <td>\n\t\t  \t\t  \t\t<Form>\n\t\t  \t  \t\t    <Form.Control size=\"sm\" type=\"text\" placeholder=\"Site\" value={siteFilter} onChange={this.handleFilterSiteChange} />\n\t\t  \t  \t\t  </Form>\n\t\t\t  \t\t  </td>\n\t\t\t  \t\t  <td>\n  \t\t  \t  \t\t<Form>\n  \t\t    \t\t    <Form.Control size=\"sm\" type=\"text\" placeholder=\"Envt\" value={environmentFilter} onChange={this.handleFilterEnvironmentChange} />\n  \t\t    \t\t  </Form>\n\t\t\t  \t\t  </td>\n\t\t\t  \t\t  <td>\n  \t\t  \t  \t\t<Form>\n  \t\t    \t\t    <Form.Control size=\"sm\" type=\"text\" placeholder=\"Domain\" value={domainFilter} onChange={this.handleFilterDomainChange} />\n  \t\t    \t\t  </Form>\n\t\t\t  \t\t  </td>\n\t\t\t  \t\t  <td>\n  \t\t  \t  \t\t<Form>\n  \t\t    \t\t    <Form.Control size=\"sm\" type=\"text\" placeholder=\"TODO\" value={cnameFilter} onChange={this.handleFilterCnameChange} />\n  \t\t    \t\t  </Form>\n\t\t\t  \t\t  </td>\n\t\t\t  \t\t  <td></td>\n\t\t\t  \t\t  <td></td>\n\t\t\t  \t\t  <td></td>\n\t\t  \t\t  </tr>\n\t\t  \t\t  </thead>\n\t\t\t  \t\t\t<URLList siteFilter={siteFilter} environmentFilter={environmentFilter} domainFilter={domainFilter} cnameFilter={cnameFilter} update={update} />\n\t\t  \t\t</Table>\n\t  \t\t</Col>\n  \t\t</Row>\n\t\t);\n  }\n}\n\nexport default FilterableURLList;\n","import React from \"react\";\nimport ReactDOM from 'react-dom';\n\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/bootstrap_darky.min.css';\nimport './css/rolex_url.css';\n\nimport Container from 'react-bootstrap/Container';\n\nimport Navbar from 'react-bootstrap/Navbar';\nimport FilterableURLList from './components/FilterableURLList';\n\n\nfunction App() {\n  const rolexURL = \n    <Container fluid>\n      <Navbar expand=\"lg\" variant=\"dark\" bg=\"dark\">\n        <Navbar.Brand href=\"#\">Rolex - URLs verification tool</Navbar.Brand>\n      </Navbar>\n\n      <FilterableURLList />\n\n    </Container>\n  ;\n  return ReactDOM.render(rolexURL, document.getElementById('root'));\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
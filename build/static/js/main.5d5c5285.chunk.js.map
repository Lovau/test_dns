{"version":3,"sources":["components/URL.js","components/URLList.js","App.js","reportWebVitals.js","index.js"],"names":["fetch","require","sslCertificate","URL","props","state","sgtin","getRandomSGTIN","url","domain","this","update","cname","getDNSDetails","length","hasCharacters","result","characters","charactersLength","i","charAt","Math","floor","random","includes","replace","a","Promise","resolve","reject","_removeDomainProtocol","then","res","json","Answer","data","catch","err","console","log","get","certificate","valid_to","fullURL","method","dnsExist","setState","getSSLExpiryDate","SSLExpiryDate","getRedirect","redirectWithoutSGTIN","redirectWithSGTIN","React","Component","URLList","urls","Array","handleClick","bind","domains","listUrls","map","Row","Col","sm","onClick","Table","striped","bordered","hover","responsive","size","className","App","rolexURL","Container","fluid","Navbar","expand","variant","bg","Brand","href","ReactDOM","render","document","getElementById","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.5d5c5285.chunk.js","sourcesContent":["import React from \"react\";\nconst fetch = require('node-fetch');\n// const sslChecker = require(\"ssl-checker\");\n// const checkCertExpiration = require('check-cert-expiration');\nconst sslCertificate = require('get-ssl-certificate-next')\n\n// from: https://stackoverflow.com/questions/43262121/trying-to-use-fetch-and-pass-in-mode-no-cors\n// Generated with:\n// \tgit clone https://github.com/Rob--W/cors-anywhere.git\n// \tcd cors-anywhere/\n// \tnpm install\n// \theroku create\n// \tgit push heroku master\n// const CORS_PROXY = 'https://infinite-crag-06340.herokuapp.com/';\n\nclass URL extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n    \tsgtin: this.getRandomSGTIN()\n    };\n    this.state = {\n    \turl: props.domain + \"/\" + this.state.sgtin\n    };\n\n    // this.handleClick = this.handleClick.bind(this);\n  }\n\n  // handleClick() {\n  // \tif (! this.state.cname) {\n\t //  \tconsole.log(\"click !\");\n\t //  \tthis.getDNSDetails(this.props.domain);\n\t\t// }\n  // }\n\n  componentDidMount() {\n  \tif (this.props.update && !this.state.cname) {\n    \tthis.getDNSDetails(this.props.domain);\n  \t}\n  }\n  componentDidUpdate() {\n  \tif (this.props.update && !this.state.cname) {\n    \tthis.getDNSDetails(this.props.domain);\n  \t}\n  }\n\n\n  _randomstring(length, hasCharacters = true) {\n      var result           = '';\n      var characters       = '0123456789';\n      if (hasCharacters) {\n      \tcharacters += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n      }\n      var charactersLength = characters.length;\n      for ( var i = 0; i < length; i++ ) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n     }\n     return result;\n  }\n\n  getRandomSGTIN() {\n  \t// return '0' + this._randomstring(12, false) + '9' + this._randomstring(11, true);\n  \treturn '0123';\n  }\n\n  _removeDomainProtocol(domain) {\n  \tif (domain.includes(\"https://\")) {\n  \t\t domain = domain.replace(\"https://\", \"\");\n  \t} else if (domain.includes(\"http://\")) {\n  \t\t domain = domain.replace(\"http://\", \"\");\n  \t} \n  \treturn domain;\n  }\n\n  async dnsExist(domain) {\n  \treturn new Promise((resolve, reject) => {\n\n  \t\tdomain = this._removeDomainProtocol(domain);\n\n  \t\tvar url = 'https://dns.google/resolve?name=' + domain;\n\n  \t\tfetch(url)\n\t\t    .then(res => res.json())\n\t\t    .then(json => {\n\t\t    \tif (json.Answer) {\n\t\t    \t\tvar cname = json.Answer[0].data;\n\t\t\t  \t\tresolve(cname);\n\t\t    \t}\n\t\t    \treject(json);\n\t\t    })\n\t\t    .catch(err => {\n\t\t    \tconsole.log(err);\n\t\t    \treject(err);\n\t\t    });\n  \t});\n  }\n\n  // getSSLExpiryDate(domain) {\n\t\t// domain = this._removeDomainProtocol(domain);\n\t\t// console.log(\"Getting SSL expiry date for \"+domain);\n\t\t// (async function () {\n\t //    try {\n  //       const { valid_to, daysLeft, host, port } = await checkCertExpiration('qru.aptamilessensis.com');\n  //       console.log(`${daysLeft} days until the certificate expires for ${host}:${port}`);\n\t\t// \t\tthis.setState({\n\t\t// \t\t\tSSLExpiryDate: valid_to\n\t\t// \t\t});\n\t\t// \t\treturn valid_to;\n\t //    } catch (err) {\n  //       console.error(`${err.name}:${err.message}`);\n  //       return err;\n\t //    }\n  //   })();\n  // }\n\n  // async getSSLExpiryDate(domain) {\n  // \treturn new Promise((resolve, reject) => {\n  // \t\tdomain = this._removeDomainProtocol(domain);\n  // \t\tconsole.log(\"SSL\",domain);\n  // \t\tsslChecker(domain, { method: \"GET\", port: 443 })\n  // \t\t\t.then((data) => {\n  // \t\t\t\tthis.setState({\n  // \t\t\t\t\tSSLExpiryDate: data.validTo\n  // \t\t\t\t});\n  // \t\t\t\tresolve(data.validTo);\n  // \t\t\t});\n  // \t});\n  // }\n  \n  async getSSLExpiryDate(domain) {\n  \treturn new Promise((resolve, reject) => {\n\t  \t\tdomain = this._removeDomainProtocol(domain);\n\n\t  \t\tsslCertificate.get(domain).then(function (certificate) {\n\t  \t\t\tconsole.log(\"SSL expiry date for domain \"+domain+ \": \"+certificate.valid_to)\n\t\t\t\t\tresolve(certificate.valid_to);\n\t  \t\t})\n\t  \t\t.catch(err => {\n\t  \t\t\tconsole.log(\"SSL domain for \"+domain, err);\n\t  \t\t\treject(err);\n\t  \t\t});\n\t  });\n\t}\n\n\tasync getRedirect(fullURL) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfetch(fullURL, {\n\t\t\t\t\tmethod: 'GET', // The method\n\t\t\t\t})\n\t\t    .then(res => {\n\t\t\t    \tconsole.log(\"Redirect for \"+fullURL+\" is: \"+ res.url, res);\n\t\t\t    \tresolve(res.url);\n\t\t    })\n\t\t    .catch(err => {\n\t\t    \tconsole.log(\"getRedirect err\", fullURL, err);\n\t\t    \treject(err);\n\t\t    });\n\t\t});\n\t}\n\n  async getDNSDetails(domain) {\n\n  \ttry {\n  \t\tvar cname = await this.dnsExist(domain);\n  \t\tthis.setState({\n  \t\t\tcname: cname\n  \t\t});\n  \t\tconsole.log(domain + \": CNAME\", this.state.cname);\n\n\t\t\tif (cname) {\n\t  \t\ttry {\n\t\t  \t\tvar SSLExpiryDate = await this.getSSLExpiryDate(domain);\n\t\t  \t\tthis.setState({\n\t\t  \t\t\tSSLExpiryDate: SSLExpiryDate\n\t\t  \t\t});\n\t\t  \t\tconsole.log(domain + \": SSL expiry Date\", SSLExpiryDate);\n\t  \t\t} catch (err) {\n\t  \t\t\tthis.setState({\n\t  \t\t\t\tSSLExpiryDate: \"Unable to get SSL\"\n\t  \t\t\t});\n\t  \t\t\tconsole.log(domain + \": Error\", err);\n\t  \t\t}\n\n\t  \t\ttry {\n\t  \t\t\t//TODO : test if http/https is there\n\t\t  \t\tvar redirectWithoutSGTIN = await this.getRedirect(domain);\n\t\t  \t\tif (redirectWithoutSGTIN === domain+\"/\") {\n\t\t  \t\t\tredirectWithoutSGTIN = \"No redirection\";\n\t\t  \t\t}\n\t\t  \t\tthis.setState({\n\t\t  \t\t\tredirectWithoutSGTIN: redirectWithoutSGTIN\n\t\t  \t\t});\n\t\t  \t\tconsole.log(domain + \" redirects to \"+ redirectWithoutSGTIN);\n\t  \t\t} catch (err) {\n\t  \t\t\tthis.setState({\n\t  \t\t\t\tredirectWithoutSGTIN: \"Unable to get the redirection\"\n\t  \t\t\t});\n\t  \t\t\tconsole.log(domain + \": Error\", err);\n\t  \t\t}\n\n\t  \t\ttry {\n\t\t  \t\t//TODO : test if http/https is there\n\t\t  \t\tvar redirectWithSGTIN = await this.getRedirect(this.state.url);\n\t\t  \t\tif (redirectWithSGTIN === this.state.url) {\n\t\t  \t\t\tredirectWithSGTIN = \"No redirection\";\n\t\t  \t\t}\n\t\t  \t\tthis.setState({\n\t\t  \t\t\tredirectWithSGTIN: redirectWithSGTIN\n\t\t  \t\t});\n\t\t  \t\tconsole.log(this.state.url + \" redirects to \"+ redirectWithSGTIN);\n\t  \t\t} catch (err) {\n\t\t  \t\tthis.setState({\n\t\t  \t\t\tredirectWithSGTIN: \"Unable to get the redirection\"\n\t\t  \t\t});\n\t  \t\t\tconsole.log(domain + \": Error\", err);\n\t  \t\t}\n\t  \t}\n\n  \t} catch (err) {\n  \t\tthis.setState({\n  \t\t\tcname: \"Doesn't exist\"\n  \t\t});\n  \t\tconsole.log(domain + \": Error\", err);\n  \t}\n  }\n\n  render() {\n  \treturn (\n  \t\t<tr>\n  \t\t\t<td>{this.state.url}</td>\n  \t\t\t<td>{this.state.cname}</td>\n  \t\t\t<td>{this.state.SSLExpiryDate}</td>\n  \t\t\t<td>{this.state.redirectWithoutSGTIN}</td>\n  \t\t\t<td>{this.state.redirectWithSGTIN}</td>\n  \t\t</tr>\n\t);\n  }\n\n}\n\nexport default URL;\n","import React from \"react\";\nimport Table from 'react-bootstrap/Table';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport URL from './URL';\n\nconst fetch = require('node-fetch');\n\nclass URLList extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n    \turls: Array(2)\n    };\n    this.state.urls[0] = {'domain': \"https://qru.aptamilessensis.com\", \"update\": false};\n    this.state.urls[1] = {'domain': \"https://qr.aptaclub.de\", \"update\": false};\n    this.state.urls[2] = {'domain': \"https://qrG.aptaclub.de\", \"update\": false};\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick() {\n  \tconsole.log(\"click !\");\n  \tvar urls = this.state.urls;\n  \tfor (var i = 0; i < urls.length; i++) {\n  \t\turls[i].update = true;\n  \t}\n  \tthis.setState({\n  \t\turls: urls\n  \t})\n  }\n\n  render() {\n  \tvar domains = this.state.urls;\n  \tconsole.log(\"domains\", domains);\n  \tconst listUrls = domains.map((domain) =>\n  \t  <URL key={domain.domain} domain={domain.domain} update={domain.update} />\n  \t);\n\n  \treturn (\n  \t\t<Row>\n\t  \t\t<Col sm={12}>\n\t\t  \t\t<button onClick={this.handleClick}>trigger</button>\n\t  \t\t</Col>\n\n\t  \t\t<Col sm={12} >\n\t\t  \t\t<Table striped bordered hover responsive size=\"sm\" className=\"stubLinks\">\n\t\t  \t\t  <thead>\n\t\t  \t\t  <tr>\n\t\t  \t\t  <td>URL</td>\n\t\t  \t\t  <td>CNAME</td>\n\t\t  \t\t  <td>SSL expiry date</td>\n\t\t  \t\t  <td>Redirect without SGTIN</td>\n\t\t  \t\t  <td>Redirect with SGTIN</td>\n\t\t  \t\t  </tr>\n\t\t  \t\t  </thead>\n\t\t  \t\t  <tbody>\n\t\t  \t\t    {listUrls}\n\t\t  \t\t  </tbody>\n\t\t  \t\t</Table>\n\t  \t\t</Col>\n  \t\t</Row>\n\t\t);\n  }\n}\n\nexport default URLList;\n","import React from \"react\";\nimport ReactDOM from 'react-dom';\n\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/bootstrap_darky.min.css';\n\nimport Container from 'react-bootstrap/Container';\n\nimport Navbar from 'react-bootstrap/Navbar';\n// import Alert from 'react-bootstrap/Alert';\nimport URLList from './components/URLList';\n\n\nfunction App() {\n  const rolexURL = \n    <Container fluid>\n      <Navbar expand=\"lg\" variant=\"dark\" bg=\"dark\">\n        <Navbar.Brand href=\"#\">Rolex - URLs verification tool</Navbar.Brand>\n      </Navbar>\n\n      <URLList />\n\n    </Container>\n  ;\n  return ReactDOM.render(rolexURL, document.getElementById('root'));\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
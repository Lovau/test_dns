{"version":3,"sources":["components/Helper.js","components/URL.js","data/Rolex_URL_working_copy.csv","admin/http-common.js","admin/services/domain.service.js","components/URLList.js","components/Column.js","components/FilterableURLList.js","components/Header.js","admin/components/add-domain.component.js","App.js","reportWebVitals.js","index.js"],"names":["Helper","isAdmin","location","pathname","split","_randomstring","length","hasCharacters","result","characters","charactersLength","i","charAt","Math","floor","random","getEnvironmentList","getRandomSGTIN","this","_removeDomainProtocol","domain","includes","replace","slice","getColumnsNames","isColumnAlwaysVisible","column","indexOf","getDBNameFromDisplayName","displayName","columns","columnNameToDisplay","columnNameDB","fetch","require","cnameErrorMessage","serverUnknownMessage","SSLError","RedirectionError","NoRedirectionMessage","RolexExperienceMessage","API_DNS","API_SSL","API_REDIRECT","API_KEY","URL","props","setActiveDomain","bind","state","updateInProgress","updateDNSInProgress","updateSSLInProgress","updateRedirWithSGTINInProgress","updateRedirWithoutSGTINInProgress","sgtin","url","isSelected","setState","update","cname","otherRecords","updateDNS","updateSSL","SSLExpiryDate","updateRedirection","redirects","redirectWithSGTIN","redirectWithoutSGTIN","getRedirectionDetails","getSSLDetails","getDNSDetails","getAllURLDetails","a","Promise","resolve","reject","method","headers","then","res","json","body","catch","err","console","log","daysRemaining","fullURL","ok","msg","domainAndCnameData","dnsExist","response","CNAME","otherrecords","Error","server","cnameMapping","parentCallback","getSSLExpiryDate","getRedirect","redirect","display","tdCnameClass","DNSContent","tdSSLClass","SSLContent","tdRedirectionClass","RedirectionContent","sameRedirectionsWithOrWithoutSGTIN","redirectionsWithSGTINisTheSameAsWithoutSGTIN","isRolex","redirectFilter","toLowerCase","value","TDs","countTD","editLink","columnsFilters","isVisible","isadmin","to","uuid","className","push","onClick","dangerouslySetInnerHTML","__html","React","Component","axios","create","baseURL","http","get","id","data","put","delete","title","URLList","domainsToCnames","handleCallback","loadingURLs","childData","readCSV","URLs","urls","CSV","text","Papa","parse","header","skipEmptyLines","DomainDataService","getAll","Items","domains","orderDomains","e","sort","b","brandcompare","brand","localeCompare","environment","retrieveDomains","dns","cnameFilter","filter","Row","Col","sm","listUrls","map","URLisFiltered","trim","Brand","Environment","Live","live","Comment","comment","Column","toggleChange","isChecked","onChange","columnName","defaultChecked","Form","Check","type","label","messageFilterNeedsToBeActive","FilterableURLList","handleURLsVerifications","handleFilterColumnChange","handleFilterCnameChange","handleFilterRedirectChange","handleDNSVerifications","handleSSLVerifications","handleRedirection","handleColumnChange","key","preventDefault","target","placeholder","setUpdateToFalse","site","isFilterActive","checkboxes","header1","header2","header3","Control","size","onKeyPress","handleKeyPress","Container","fluid","Button","variant","Alert","Table","striped","bordered","hover","responsive","Header","useLocation","Navbar","expand","bg","as","Link","Collapse","Nav","isValidDomain","AddDomain","onChangeDomain","onChangeBrand","onChangeEnvironment","onChangeLive","onChangeComment","createNewDomain","updateDomain","deleteDomain","newDomain","currentDomain","validationMsg","submitted","match","params","isNew","loadDomain","Item","startsWith","validateAndCleanDomain","validateBrand","message","validateAndCleanData","history","htmlFor","required","defaultValue","name","option","rows","App","useEffect","window","addEventListener","text_only","document","getSelection","toString","clipdata","clipboardData","setData","rolexURL","exact","path","component","ReactDOM","render","getElementById","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.75a712fb.chunk.js","sourcesContent":["const Helper = {\n\n  isAdmin(location) {\n    //destructuring pathname from location\n    const { pathname } = location;\n    \n    //Javascript split method to get the name of the path in array\n    const splitLocation = pathname.split(\"/\");\n    if (splitLocation[1] === \"isadmin\") {\n      return true;\n    }\n    return false;\n  },\n\n  _randomstring(length, hasCharacters = true) {\n      var result           = '';\n      var characters       = '0123456789';\n      if (hasCharacters) {\n      \tcharacters += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n      }\n      var charactersLength = characters.length;\n      for ( var i = 0; i < length; i++ ) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n     }\n     return result;\n  },\n\n  getEnvironmentList() {\n    return [\n      \"RC\",\n      \"Staging\",\n      \"Prod Tech\",\n      \"Public prod\",\n    ];\n  },\n\n  getRandomSGTIN() {\n  \t// return '0' + this._randomstring(12, false) + '9' + this._randomstring(11, true);\n  \treturn this._randomstring(3, false);\n  },\n\n  _removeDomainProtocol(domain) {\n  \tif (domain.includes(\"https://\")) {\n  \t\t domain = domain.replace(\"https://\", \"\");\n  \t} else if (domain.includes(\"http://\")) {\n  \t\t domain = domain.replace(\"http://\", \"\");\n  \t} \n    if (domain.slice(domain.length - 1) === \"/\") {\n      domain = domain.slice(0, -1);\n    }\n  \treturn domain;\n  },\n\n  //mapping: columnNameInDB => column name displayed\n  getColumnsNames() {\n    return [\n      { \n        \"columnNameDB\": \"brand\",\n        \"columnNameToDisplay\": \"Brand\"\n      },\n      { \n        \"columnNameDB\": \"environment\",\n        \"columnNameToDisplay\": \"Environment\"\n      },\n      { \n        \"columnNameDB\": \"domain\",\n        \"columnNameToDisplay\": \"URL\"\n      },\n      { \n        \"columnNameDB\": \"live\",\n        \"columnNameToDisplay\": \"Live\"\n      },\n      { \n        \"columnNameDB\": \"comment\",\n        \"columnNameToDisplay\": \"Comment\"\n      }\n    ];\n  },\n\n  isColumnAlwaysVisible(column) {\n    var columnsVisible = [\n      \"Brand\",\n      \"Environment\",\n      \"URL\",\n    ];\n    if (columnsVisible.indexOf(column) !== -1) {\n      return true;\n    }\n    return false;\n  },\n\n  getDBNameFromDisplayName(displayName) {\n    var columns = this.getColumnsNames();\n    for (var i = 0; i < columns.length; i++) {\n      if (columns[i].columnNameToDisplay === displayName) {\n        return columns[i].columnNameDB;\n      }\n    }\n  }\n};\n\nexport default Helper;\n","import React from \"react\";\nimport Helper from \"./Helper\";\nimport { Link } from \"react-router-dom\";\n\nconst fetch = require('node-fetch');\n// const sslChecker = require(\"ssl-checker\");\n// const checkCertExpiration = require('check-cert-expiration');\n// const sslCertificate = require('get-ssl-certificate-next')\n\n\n// from: https://stackoverflow.com/questions/43262121/trying-to-use-fetch-and-pass-in-mode-no-cors\n// Generated with:\n// \tgit clone https://github.com/Rob--W/cors-anywhere.git\n// \tcd cors-anywhere/\n// \tnpm install\n// \theroku create\n// \tgit push heroku master\n// const CORS_PROXY = 'https://infinite-crag-06340.herokuapp.com/';\n\nconst cnameErrorMessage = \"Doesn't exist\";\nconst serverUnknownMessage = \"Unknown server\";\nconst SSLError = \"Unable to get SSL\";\nconst RedirectionError = \"Unable to get the redirection\";\nconst NoRedirectionMessage = \"No redirection\";\nconst RolexExperienceMessage = \"<span class='rolex-experience' >Rolex experience</span>\";\n\n// curl --location --request https://tj4k759l15.execute-api.eu-west-1.amazonaws.com/test/dnslookup?DNS=qrt.aptaclub.de --header 'x-api-key: 44XlITH2DCdahKjpe4401eT5070UwdK9xBFCJMR6'\n// curl --location --request https://fd902g59y1.execute-api.eu-west-1.amazonaws.com/prod/dnslookup?DNS=qrt.aptaclub.de --header 'x-api-key: ARISr1o5Cp5ElA4GyfbWeR4hgrZeINBaeLTuJZ04'\n\n// const API_DNS = \"https://tj4k759l15.execute-api.eu-west-1.amazonaws.com/test/dnslookup?DNS=\"; // sandbox\n// const API_SSL = \"https://tj4k759l15.execute-api.eu-west-1.amazonaws.com/test/getsslexpirydate?DNS=\"; // sandbox\n// const API_REDIRECT = \"https://tj4k759l15.execute-api.eu-west-1.amazonaws.com/test/getredirect?URL=\"; // sandbox\n// const API_KEY = \"44XlITH2DCdahKjpe4401eT5070UwdK9xBFCJMR6\"; //sandbox\nconst API_DNS = \"https://fd902g59y1.execute-api.eu-west-1.amazonaws.com/prod/dnslookup?DNS=\"; // prod\nconst API_SSL = \"https://fd902g59y1.execute-api.eu-west-1.amazonaws.com/prod/getsslexpirydate?DNS=\"; // prod\nconst API_REDIRECT = \"https://fd902g59y1.execute-api.eu-west-1.amazonaws.com/prod/getredirect?URL=\"; // prod\nconst API_KEY = \"ARISr1o5Cp5ElA4GyfbWeR4hgrZeINBaeLTuJZ04\"; // prod\n\nclass URL extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.setActiveDomain = this.setActiveDomain.bind(this);\n\n    this.state = {\n    \tupdateInProgress: false,\n    \tupdateDNSInProgress: false,\n    \tupdateSSLInProgress: false,\n    \tupdateRedirWithSGTINInProgress: false,\n    \tupdateRedirWithoutSGTINInProgress: false,\n    \tsgtin: Helper.getRandomSGTIN()\n    };\n\n    this.state = {\n    \turl: props.domain + \"/\" + this.state.sgtin,\n      isSelected: false\n    };\n  }\n  \n  setActiveDomain() {\n    this.setState({\n      isSelected: !this.state.isSelected\n    });\n  }\n\n  componentDidUpdate() {\n  \tif (this.props.update === true && !this.state.updateInProgress && !this.state.cname && !this.state.otherRecords) {\n  \t// || !this.state.SSLExpiryDate || !this.state.redirectWithSGTIN || !this.state.redirectWithoutSGTIN)) {\n  \t\n  \t\t// updateInProgress is here to avoid calling the update again while it is already called\n  \t\tthis.setState({\n  \t\t\tupdateInProgress: true,\n  \t\t\tupdateDNSInProgress: true,\n  \t\t\tupdateSSLInProgress: true,\n  \t\t\tupdateRedirWithSGTINInProgress: true,\n  \t\t\tupdateRedirWithoutSGTINInProgress: true,\n  \t\t});\n    \tthis.getAllURLDetails(this.props.domain);\n  \t}\n  \telse if (this.props.updateDNS === true && !this.state.updateDNSInProgress && !this.state.cname && !this.state.otherRecords) {\n  \t\tthis.setState({\n  \t\t\tupdateDNSInProgress: true,\n  \t\t});\n    \tthis.getDNSDetails(this.props.domain);\n  \t}\n  \telse if (this.props.updateSSL === true && !this.state.updateSSLInProgress && !this.state.SSLExpiryDate) {\n  \t\tthis.setState({\n  \t\t\tupdateSSLInProgress: true,\n  \t\t});\n    \tthis.getSSLDetails(this.props.domain);\n  \t}\n  \telse if (this.props.updateRedirection === true \n  \t\t\t\t\t\t&& !this.state.updateRedirWithoutSGTINInProgress\n  \t\t\t\t\t\t&& !this.state.updateRedirWithSGTINInProgress\n  \t\t\t\t\t\t&& (typeof this.state.redirects === \"undefined\" \n  \t\t\t\t\t\t\t\t|| typeof this.state.redirects.redirectWithSGTIN === \"undefined\"\n  \t\t\t\t\t\t\t\t|| typeof this.state.redirects.redirectWithoutSGTIN === \"undefined\")) {\n  \t\tthis.setState({\n  \t\t\tupdateRedirWithoutSGTINInProgress: true,\n  \t\t\tupdateRedirWithSGTINInProgress: true,\n  \t\t});\n    \tthis.getRedirectionDetails(this.props.domain);\n  \t}\n  }\n\n  async dnsExist(domain) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfetch(API_DNS+domain, {\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\theaders:  {\n\t\t\t\t\t\t'x-api-key': API_KEY\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t    .then(res => res.json())\n        .then(body => {\n        \tresolve(body);\n        })\n\t\t    .catch(err => {\n\t\t    \tconsole.log(\"getDNS err2\", API_DNS+domain, err);\n\t\t    \treject(err);\n\t\t    });\n\t\t});\n  }\n\n  async getSSLExpiryDate(domain) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfetch(API_SSL+domain, {\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\theaders:  {\n\t\t\t\t\t\t'x-api-key': API_KEY\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t    .then(res => res.json())\n        .then(body => {\n        \t\tif (!body.daysRemaining) {\n        \t\t\tconsole.log(\"getSSL err1\", API_SSL+domain, body);\n        \t\t\treturn reject(body);\n        \t\t}\n        \t\treturn resolve(body.daysRemaining);\n        \t})\n\t\t    .catch(err => {\n\t\t    \tconsole.log(\"getSSL err2\", API_SSL+domain, err);\n\t\t    \treject(err);\n\t\t    });\n\t\t});\n\t}\n\n\tasync getRedirect(fullURL) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfetch(API_REDIRECT+fullURL, {\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\theaders:  {\n\t\t\t\t\t\t'x-api-key': API_KEY\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t    .then(res => {\n\t\t    \tif (!res.ok) {\n\t\t\t    \tconsole.log(\"getRedirect err\", API_REDIRECT+fullURL, \"Not a 200 response\");\n\t\t\t    \treject(res);\n\t\t    \t}\n\t\t    \treturn res.json();\n\t\t    })\n        .then(body => resolve(body))\n\t\t    .catch(err => {\n\t\t    \tconsole.log(\"getRedirect err\", API_REDIRECT+fullURL, err);\n\t\t    \treject(err);\n\t\t    });\n\t\t});\n\t}\n\n\t// TODO : if API error, handle it and display a dedicated error message. Or even allows to retry.\n  async getAllURLDetails(domain) {\n  \tawait this.getDNSDetails(domain);\n\n\t\tif ((this.state.cname || this.state.otherRecords) && this.state.cname !== cnameErrorMessage) {\n\t\t\tawait this.getSSLDetails(domain);\n  \t\tawait this.getRedirectionDetails(domain);\n  \t} else {\n  \t\tthis.setState({\n  \t\t\tSSLExpiryDate: SSLError,\n  \t\t\tredirects: {\n  \t\t\t\tredirectWithoutSGTIN: {\n  \t\t\t\t\tmsg: RedirectionError \n  \t\t\t\t},\n  \t\t\t\tredirectWithSGTIN: {\n  \t\t\t\t\tmsg: RedirectionError \n  \t\t\t\t},\n  \t\t\t}\n  \t\t});\n  \t}\n  \tthis.setState({\n  \t\tupdateInProgress: false,\n  \t\tupdateDNSInProgress: false,\n  \t\tupdateSSLInProgress: false,\n  \t\tupdateRedirWithoutSGTINInProgress: false,\n  \t\tupdateRedirWithSGTINInProgress: false,\n  \t});\n  }\n\n\n  // TODO: when no CNAME, check if the DNS exists with another record\n  async getDNSDetails(domain) {\n\t\tvar domainAndCnameData = {};\n\t\ttry {\n\t\t\tvar response = await this.dnsExist(Helper._removeDomainProtocol(domain));\n\t\t\tconsole.log(\"DNS response\", response);\n\t\t\tvar cname, otherRecords;\n\t\t\tif ('CNAME' in response && response.CNAME[0]) {\n\t\t\t\tcname = response.CNAME[0];\n\t\t\t} else if ('otherrecords' in response) {\n\t\t\t\totherRecords = response.otherrecords;\n\t\t\t} else {\n\t\t\t\tthrow Error(\"Record not found\");\n\t\t\t}\n\n\t\t\tthis.setState({\n\t\t\t\tcname: cname,\n\t\t\t\totherRecords: otherRecords\n\t\t\t});\n\n\t\t\tvar server;\n\t\t\tif (this.props.cnameMapping[cname]) {\n\t\t\t\t\tserver = this.props.cnameMapping[cname];\n\t\t\t} else if (this.props.cnameMapping[cname+\".\"]) {\n\t\t\t\t\tserver = this.props.cnameMapping[cname+\".\"];\n\t\t\t} else {\n\t\t\t\t\tserver = serverUnknownMessage;\n\t\t\t}\n\t\t\tthis.setState({\n\t\t\t\tserver: server\n\t\t\t});\n\t\t\tdomainAndCnameData[Helper._removeDomainProtocol(domain)] = cname + ' ' + server;\n\t\t\tthis.props.parentCallback(domainAndCnameData);\n\n\t\t} catch (err) {\n\t\t\tthis.setState({\n\t\t\t\tcname: cnameErrorMessage\n\t\t\t});\n\t\t\tdomainAndCnameData[Helper._removeDomainProtocol(domain)] = cnameErrorMessage;\n\t\t\tthis.props.parentCallback(domainAndCnameData);\n\t\t\tconsole.log(domain + \": Error\", err);\n\t\t}\n\n\t\tthis.setState({\n\t\t\tupdateDNSInProgress: false,\n\t\t});\n  }\n\n  async getSSLDetails(domain) {\n\t\ttry {\n\t\t\tvar SSLExpiryDate = await this.getSSLExpiryDate(Helper._removeDomainProtocol(domain));\n\t\t\tthis.setState({\n\t\t\t\tSSLExpiryDate: SSLExpiryDate\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tthis.setState({\n\t\t\t\tSSLExpiryDate: SSLError\n\t\t\t});\n\t\t\tconsole.log(domain + \": Error\", err);\n\t\t}\n\n\t\tthis.setState({\n\t\t\tupdateSSLInProgress: false,\n\t\t});\n  }\n\n  async getRedirectionDetails(domain) {\n\t\ttry {\n\t\t\tvar redirects = {};\n\t\t\tredirects.redirectWithSGTIN = {};\n\t\t\tredirects.redirectWithSGTIN = await this.getRedirect(this.state.url);\n\t\t\tredirects.redirectWithSGTIN.msg = redirects.redirectWithSGTIN.redirect;\n\t\t\tif (redirects.redirectWithSGTIN.redirect === this.state.url) {\n\t\t\t\tredirects.redirectWithSGTIN.msg = NoRedirectionMessage;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tredirects.redirectWithSGTIN.msg = RedirectionError;\n\t\t\tconsole.log(domain + \": Error\", err);\n\t\t}\n\n\t\tthis.setState({\n\t\t\tupdateRedirWithSGTINInProgress: false,\n\t\t});\n\n\t\ttry {\n\t\t\tredirects.redirectWithoutSGTIN = {};\n\t\t\tredirects.redirectWithoutSGTIN = await this.getRedirect(domain);\n\t\t\tredirects.redirectWithoutSGTIN.msg = redirects.redirectWithoutSGTIN.redirect;\n\t\t\tif (redirects.redirectWithoutSGTIN.redirect === domain || redirects.redirectWithoutSGTIN.redirect === domain+\"/\" || redirects.redirectWithoutSGTIN.redirect + \"/\" === domain) {\n\t\t\t\tredirects.redirectWithoutSGTIN.msg = NoRedirectionMessage;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tredirects.redirectWithoutSGTIN.msg = RedirectionError;\n\t\t\tconsole.log(domain + \": Error\", err);\n\t\t}\n\n\t\tthis.setState({\n\t\t\tredirects: redirects,\n\t\t\tupdateRedirWithoutSGTINInProgress: false,\n\t\t});\n  }\n\n\n  redirectionsWithSGTINisTheSameAsWithoutSGTIN() {\n  \tif (!this.state.redirects.redirectWithoutSGTIN.redirect || this.state.redirects.redirectWithoutSGTIN.redirect.length < 1 || !this.state.redirects.redirectWithSGTIN.redirect || this.state.redirects.redirectWithSGTIN.redirect.length < 1 ) {\n  \t\treturn true;\n  \t}\n\n  \tif (this.state.redirects.redirectWithoutSGTIN.redirect === this.state.redirects.redirectWithSGTIN.redirect || this.state.redirects.redirectWithSGTIN.redirect.includes(this.state.redirects.redirectWithoutSGTIN.redirect)) {\n  \t\treturn true;\n  \t}\n  \treturn false;\n  }\n\n  render() {\n  \tif (!this.props.display) {\n  \t\treturn null;\n  \t}\n\n  \t// DNS cell\n  \tvar tdCnameClass = \"\";\n  \tvar DNSContent = this.state.cname;\n  \tif (this.state.updateDNSInProgress) {\n  \t\ttdCnameClass = \"updating\";\n  \t}\n  \tif (this.state.server === serverUnknownMessage) {\n  \t\ttdCnameClass = \"warningCell\";\n  \t} \n  \tif (this.state.cname === cnameErrorMessage) {\n  \t\ttdCnameClass = \"errorCell\";\n  \t}\n  \tif (\"server\" in this.state) {\n  \t\tDNSContent = (this.state.cname ? this.state.cname + \"<br/>\" : '') + this.state.server \n  \t}\n\n  \t// SSL cell\n  \tvar tdSSLClass = \"\";\n  \tvar SSLContent = \"\";\n  \tif (this.state.updateSSLInProgress) {\n  \t\ttdSSLClass = \"updating\";\n  \t}\n  \tif (this.state.SSLExpiryDate === SSLError) {\n  \t\ttdSSLClass = \"errorCell\";\n  \t\tSSLContent = SSLError\n  \t} else if (this.state.SSLExpiryDate < 40) {\n\t\t\ttdSSLClass = \"warningCell\";\n\t\t} else if (this.state.SSLExpiryDate) {\n\t\t\tSSLContent = this.state.SSLExpiryDate + \" days\";\n  \t}\n\n  \t// Redirection\n  \tvar tdRedirectionClass = \"\";\n  \tvar RedirectionContent = \"\";\n  \tvar sameRedirectionsWithOrWithoutSGTIN = true;\n  \tif (this.state.updateRedirWithoutSGTINInProgress) {\n  \t\ttdRedirectionClass = \"updating\";\n  \t}\n  \tif (typeof this.state.redirects !== \"undefined\"\n  \t\t\t&& typeof this.state.redirects.redirectWithoutSGTIN.redirect !== \"undefined\" \n  \t\t\t&& typeof this.state.redirects.redirectWithSGTIN.redirect !== \"undefined\") {\n  \t\t\n\n\n  \t\tsameRedirectionsWithOrWithoutSGTIN = this.redirectionsWithSGTINisTheSameAsWithoutSGTIN();\n\n\t  \tif (this.state.redirects.redirectWithoutSGTIN.msg === RedirectionError) {\n\t  \t\ttdRedirectionClass = \"errorCell\";\n\t  \t\tRedirectionContent = RedirectionError;\n\t\t\t} else {\n\t\t\t\tRedirectionContent = this.state.redirects.redirectWithoutSGTIN.msg;\n\t\t\t\tif (this.state.redirects.redirectWithoutSGTIN.isRolex) {\n\t\t\t\t\tRedirectionContent += \" - \"  + RolexExperienceMessage;\n\t\t\t\t}\n\t\t\t}\n\t  \tif (!sameRedirectionsWithOrWithoutSGTIN) {\n\t  \t\ttdRedirectionClass = \"warningCell\";\n\t  \t\tRedirectionContent = \"Without SGTIN: \"+ RedirectionContent+\"<br/>With SGTIN:\" + this.state.redirects.redirectWithSGTIN.msg;\n\t  \t\tif (this.state.redirects.redirectWithSGTIN.isRolex) {\n\t  \t\t\tRedirectionContent += \" - \"  + RolexExperienceMessage;\n\t  \t\t}\n\t  \t}\n  \t}\n\n  \t// Filter\n  \tif ('redirectFilter' in this.props\n  \t\t\t&& this.props.redirectFilter.length > 0 \n  \t\t\t&& (RedirectionContent.length < 1 || !RedirectionContent.toLowerCase().includes(this.props.redirectFilter.toLowerCase()))) {\n  \t\treturn '';\n  \t}\n\n  \tvar TDs = [];\n  \tvar countTD = 0;\n  \tvar value;\n\t\tvar editLink = \"\";\n  \tif (this.props && 'columnsFilters' in this.props) {\n\t\t\tfor (var column in this.props.columnsFilters) {\n\t  \t\tif (this.props.columnsFilters[column].isVisible) {\n\t  \t\t\tvalue = '';\n\t  \t\t\teditLink = '';\n\t  \t\t\tif (column in this.props) {\n\t  \t\t\t\tvalue = this.props[column];\n\t  \t\t\t}\n\n\t  \t\t\t// if it is the 1st cell, we display here the edit button\n\t  \t\t\tif (this.props.isadmin && countTD === 0 && this.state && this.state.isSelected) {\n\t  \t\t\t\teditLink = <Link to={\"/admin/update/\" + this.props.uuid} className=\"badge badge-warning\" >Edit</Link>\n\t  \t\t\t}\n\t  \t\t\tcountTD++;\n\t  \t\t\tTDs.push(<td key={column}>{editLink}{value}</td>);\n\t  \t\t}\n\t\t\t}\n\t\t}\n  \treturn (\n  \t\t<tr onClick={() => this.setActiveDomain()} >\n  \t\t\t{TDs}\n  \t\t\t<td className={tdCnameClass} dangerouslySetInnerHTML={{__html: DNSContent}}></td>\n  \t\t\t<td className={tdSSLClass}>{SSLContent}</td>\n  \t\t\t<td className={tdRedirectionClass} dangerouslySetInnerHTML={{__html: RedirectionContent}}>\n  \t\t\t</td>\n  \t\t</tr>\n\t\t);\n  }\n\n}\n\nexport default URL;\n","export default __webpack_public_path__ + \"static/media/Rolex_URL_working_copy.d85feaa7.csv\";","import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"https://ccm35rsq84.execute-api.eu-west-1.amazonaws.com/prod\",\n  headers: {\n    \"Content-type\": \"application/json\",\n    \"x-api-key\": \"44XlITH2DCdahKjpe4401eT5070UwdK9xBFCJMR6\"\n  }\n});","import http from \"../http-common\";\n\nclass DomainDataService {\n  getAll() {\n    return http.get(\"/domains\");\n  }\n\n  get(id) {\n    return http.get(`/domains/${id}`);\n  }\n\n  create(data) {\n    return http.put(\"/domains\", data);\n  }\n\n  update(id, data) {\n    return http.put(`/domains/${id}`, data);\n  }\n\n  delete(id) {\n    return http.delete(`/domains/${id}`);\n  }\n\n  findByTitle(title) {\n    return http.get(`/domains?title=${title}`);\n  }\n}\n\nexport default new DomainDataService();","import React from \"react\";\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Papa from 'papaparse';\nimport URL from './URL';\n// import CSV from \"../data/urls.csv\";\nimport CSV from \"../data/Rolex_URL_working_copy.csv\";\nimport cnameMapping from \"../data/cname_mapping.json\";\nimport Helper from \"./Helper\";\nimport DomainDataService from \"../admin/services/domain.service\";\n\nconst fetch = require('node-fetch');\n\n\nclass URLList extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    //  this.state.urls[0] = {'domain': \"https://qru.aptamilessensis.com\", \"update\": false};\n    //  this.state.urls[1] = {'domain': \"https://qr.aptaclub.de\", \"update\": false};\n    //  this.state.urls[2] = {'domain': \"https://qrG.aptaclub.de\", \"update\": false};\n    this.state = {\n     domainsToCnames: {}\n    };\n\n    this.handleCallback = this.handleCallback.bind(this);\n    this.state.loadingURLs = false;\n  }\n\n  handleCallback(childData) {\n    var domainsToCnames = { ...this.state.domainsToCnames, ...childData };\n\n    this.setState({\n      domainsToCnames: domainsToCnames\n    });\n  }\n\n  async getURLsFromCSV() {\n  \t// if (URLs && URLs.length > 0) {\n  \t// \treturn URLs;\n  \t// }\n  \tvar URLs = await this.readCSV();\n  \tfor (var i = 0; i < URLs.length; i++) {\n  \t\tURLs[i].update = false;\n  \t}\n\n    console.log(\"URLS\", URLs);\n\n    this.setState({\n    \turls: URLs\n    });\n  }\n\n  async readCSV() {\n  \treturn fetch(CSV)\n  \t  .then((response) => {\n  \t  \treturn response.text();\n  \t  })\n  \t  .then(text => {\n\t\t  \tvar results = Papa.parse(text, { header: true, skipEmptyLines: true }); // object with { data, errors, meta }\n  \t\t  var rows = results.data; // array of objects\n  \t\t  // console.log(\"Results, rows\", results, rows);\n  \t\t  return rows;\n  \t  });\n  }\n\n  async retrieveDomains() {\n    this.setState({\n      loadingURLs: true\n    });\n\n    await DomainDataService.getAll()\n      .then(response => {\n        var URLs = response.data.Items;\n        for (var i = 0; i < URLs.length; i++) {\n          URLs[i].update = false;\n        }\n\n        this.setState({\n          domains: URLs,\n          loadingURLs: false\n        });\n\n        this.orderDomains();\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n  \n  orderDomains() {\n    this.setState({\n      domains: this.state.domains.sort((a, b) => {\n        var brandcompare = a.brand.localeCompare(b.brand);\n        if (brandcompare !== 0) {\n          return brandcompare;\n        }\n        return a.environment.localeCompare(b.environment);\n      })\n    });\n  }\n\n  componentDidMount() {\n    // this.getURLsFromCSV();\n    this.retrieveDomains();\n  }\n\n  URLisFiltered(domain) {\n\n    var dns = Helper._removeDomainProtocol(domain.brand);\n    if (this.props.cnameFilter.length > 0 \n      && \n        (!(dns in this.state.domainsToCnames) || !(this.state.domainsToCnames[dns].toLowerCase().includes(this.props.cnameFilter.toLowerCase())))\n        ) {\n        return true;\n    }\n\n    for (var column in this.props.columnsFilters) {\n      if (this.props.columnsFilters[column].isVisible \n          && this.props.columnsFilters[column].filter && this.props.columnsFilters[column].filter.length > 0\n          && !domain[Helper.getDBNameFromDisplayName(column)].toLowerCase().includes(this.props.columnsFilters[column].filter.toLowerCase())) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  render() {\n\n  \t// if (!this.state || !(\"urls\" in this.state) || this.state.urls.length < 1) {\n    if (this.state && this.state.loadingURLs) {\n      return (\n        <Row>\n          <Col sm={12}>\n            Loading the URLs ...\n          </Col>\n        </Row>\n      );\n    } \n    else if (!this.state || !(\"domains\" in this.state) || this.state.domains.length < 1) {\n  \t\treturn (\n  \t\t\t<Row>\n\t  \t\t\t<Col sm={4}>\n\t  \t\t\t\tNo URLs provided.\n\t  \t\t\t</Col>\n\t  \t\t</Row>\n  \t\t);\n  \t}\n\n    var redirectFilter = this.props.redirectFilter;\n    \n  \t// const listUrls = this.state.urls.map((domain) => {\n    const listUrls = this.state.domains.map((domain) => {\n      \n      var update = this.props.update;\n      var updateDNS = this.props.updateDNS;\n      var updateSSL = this.props.updateSSL;\n      var updateRedirection = this.props.updateRedirection;\n      var display = true;\n      if (this.URLisFiltered(domain)) {\n        update = false;\n        updateDNS = false;\n        updateSSL = false;\n        updateRedirection = false;\n        display = false;\n      }\n\n      domain.brand = domain.brand.trim();\n      \n  \t  return <URL \n                  key={domain.domain}\n                  uuid={domain.uuid}\n                  domain={domain.domain}\n                  Brand={domain.brand}              // dynamic field\n                  Environment={domain.environment}  // dynamic field\n                  URL={domain.domain}                  // dynamic field\n                  Live={domain.live}                // dynamic field\n                  Comment={domain.comment}                // dynamic field\n                  redirectFilter={redirectFilter}\n                  cnameMapping={cnameMapping}\n                  update={update}\n                  updateDNS={updateDNS}\n                  updateSSL={updateSSL}\n                  updateRedirection={updateRedirection}\n                  display={display}\n                  parentCallback={this.handleCallback}\n                  columnsFilters={this.props.columnsFilters}\n                  isadmin={this.props.isadmin}\n\t\t  \t  \t\t/>\n  \t});\n\n  \treturn (\n  \t\t<tbody>\n\t     {listUrls}\n\t    </tbody>\n\n\t\t);\n  }\n}\n\nexport default URLList;\n","import React from \"react\";\nimport Form from 'react-bootstrap/Form';\n\nclass Column extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isChecked: this.props.defaultChecked,\n    };\n  }\n\n  toggleChange = () => {\n    this.setState({\n      isChecked: !this.state.isChecked,\n    });\n\n    this.props.onChange(this.props.columnName, !this.state.isChecked);\n  }\n\n  render() {\n  \treturn (\n      <Form.Check type='checkbox' id={this.props.columnName} label={this.props.columnName} defaultChecked={this.state.isChecked} onChange={this.toggleChange} />\n\t\t);\n  }\n}\n\nexport default Column;\n","import React from \"react\";\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Table from 'react-bootstrap/Table';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\nimport URLList from './URLList';\nimport Container from 'react-bootstrap/Container';\nimport Helper from \"./Helper\";\nimport Column from \"./Column\";\n\nconst messageFilterNeedsToBeActive = \"Too many URLs to proceed, please use the filters below first. If too many requests are triggered at the same time, some results may be wrong.\";\n\nclass FilterableURLList extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.handleURLsVerifications = this.handleURLsVerifications.bind(this);\n    this.handleFilterColumnChange = this.handleFilterColumnChange.bind(this);\n    this.handleFilterCnameChange = this.handleFilterCnameChange.bind(this);\n    this.handleFilterRedirectChange = this.handleFilterRedirectChange.bind(this);\n\n    this.handleDNSVerifications = this.handleDNSVerifications.bind(this);\n    this.handleSSLVerifications = this.handleSSLVerifications.bind(this);\n    this.handleRedirection = this.handleRedirection.bind(this);\n\n    this.handleColumnChange = this.handleColumnChange.bind(this);\n  }\n\n  handleKeyPress(e) {\n  \tif (e.key === 'Enter') {\n  \t\te.preventDefault();\n  \t}\n  }\n\n  handleFilterColumnChange(e) {\n  \tvar columnName = e.target.placeholder;\n  \tvar columnsFilters = this.state.columnsFilters;\n  \tcolumnsFilters[columnName].filter = e.target.value;\n  \tthis.setState({\n  \t\tcolumnsFilters: columnsFilters\n  \t})\n  \tthis.setUpdateToFalse();\n  }\n\n  handleFilterCnameChange(e) {\n  \tthis.setState({\n  \t\tcname: e.target.value,\n  \t\tmsg: '',\n  \t});\n  \tthis.setUpdateToFalse();\n  }\n\n  handleFilterRedirectChange(e) {\n  \tthis.setState({\n  \t\tredirectFilter: e.target.value,\n  \t\tmsg: '',\n  \t});\n  \tthis.setUpdateToFalse();\n  }\n\n  handleColumnChange(columnName, isVisible) {\n  \tvar columnsFilters = this.state.columnsFilters;\n  \tcolumnsFilters[columnName] = {\n  \t\tisVisible: isVisible,\n  \t\tfilter: '',\n  \t};\n  \tthis.setState({\n  \t\tcolumnsFilters: columnsFilters\n  \t});\n  \tthis.setUpdateToFalse();\n  }\n\n  componentDidMount() {\n\n  \tvar columns = Helper.getColumnsNames();\n  \tvar columnsFilters = [];\n  \tfor (var i = 0; i < columns.length; i++) {\n  \t\tcolumnsFilters[columns[i].columnNameToDisplay] = {\n\t  \t\tisVisible: Helper.isColumnAlwaysVisible(columns[i].columnNameToDisplay),\n\t  \t\tfilter: '',\n\t  \t};\n  \t}\n  \tthis.setState({\n  \t\tcolumnsFilters: columnsFilters,\n  \t\tsite: '',\n  \t\tenvironment: '',\n  \t\tdomain: '',\n  \t\tcname: '',\n  \t\tmsg: '',\n  \t});\n  \tthis.setUpdateToFalse();\n  }\n\n\tcomponentDidUpdate() {\n\t\t// console.log(\"update\", this.props);\t\n\t}\n\n  isFilterActive() {\n  \tfor (var column in this.state.columnsFilters) {\n  \t\tif (this.state.columnsFilters[column].isVisible \n  \t\t\t\t&& this.state.columnsFilters[column].filter \n  \t\t\t\t&& this.state.columnsFilters[column].filter.length > 0) {\n  \t\t\treturn true;\n  \t\t}\n  \t}\n  \treturn false;\n  }\n\n  setUpdateToFalse() {\n  \tthis.setState({\n  \t\tupdate: false,\n  \t\tupdateDNS: false,\n  \t\tupdateSSL: false,\n  \t\tupdateRedirection: false,\n  \t});\n  }\n\n  handleURLsVerifications() {\n  \tif (!this.isFilterActive()) {\n  \t\tthis.setState({\n  \t\t\tmsg: messageFilterNeedsToBeActive\n  \t\t});\n  \t\treturn;\n  \t}\n  \tthis.setState({\n  \t\tupdate: true\n  \t});\n  }\n  handleDNSVerifications() {\n  \tif (!this.isFilterActive()) {\n  \t\tthis.setState({\n  \t\t\tmsg: messageFilterNeedsToBeActive\n  \t\t});\n  \t\treturn;\n  \t}\n  \tthis.setState({\n  \t\tupdateDNS: true\n  \t});\n  }\n  handleSSLVerifications() {\n  \tif (!this.isFilterActive()) {\n  \t\tthis.setState({\n  \t\t\tmsg: messageFilterNeedsToBeActive\n  \t\t});\n  \t\treturn;\n  \t}\n  \tthis.setState({\n  \t\tupdateSSL: true\n  \t});\n  }\n  handleRedirection() {\n  \tif (!this.isFilterActive()) {\n  \t\tthis.setState({\n  \t\t\tmsg: messageFilterNeedsToBeActive\n  \t\t});\n  \t\treturn;\n  \t}\n  \tthis.setState({\n  \t\tupdateRedirection: true\n  \t});\n  }\n\n  render() {\n  \tvar cnameFilter = '';\n  \tif (this.state != null && 'cname' in this.state) {\n  \t\tcnameFilter = this.state.cname;\n  \t}\n  \tvar redirectFilter = '';\n  \tif (this.state != null && 'redirectFilter' in this.state) {\n  \t\tredirectFilter = this.state.redirectFilter;\n  \t}\n  \tvar update = false;\n  \tif (this.state != null && 'update' in this.state) {\n  \t\tupdate = this.state.update;\n  \t}\n  \tvar updateDNS = false;\n  \tif (this.state != null && 'updateDNS' in this.state) {\n  \t\tupdateDNS = this.state.updateDNS;\n  \t}\n  \tvar updateSSL = false;\n  \tif (this.state != null && 'updateSSL' in this.state) {\n  \t\tupdateSSL = this.state.updateSSL;\n  \t}\n  \tvar updateRedirection = false;\n  \tif (this.state != null && 'updateRedirection' in this.state) {\n  \t\tupdateRedirection = this.state.updateRedirection;\n  \t}\n\n\n  \tvar checkboxes = [];\n  \tvar header1 = [];\n  \tvar header2 = [];\n  \tvar header3 = [];\n  \tvar columnsFilters = [];\n  \tif (this.state && 'columnsFilters' in this.state) {\n  \t\tcolumnsFilters = this.state.columnsFilters;\n  \t\tfor (var column in this.state.columnsFilters) {\n  \t\t\tvar isVisible = this.state.columnsFilters[column].isVisible;\n\t  \t\tif (isVisible) {\n\t  \t\t\theader1.push(<td key={column}></td>);\n\t  \t\t\theader2.push(<td key={column}>{column}</td>);\n\t  \t\t\theader3.push(<td key={column}><Form>\n\t\t  \t  \t\t    \t\t\t<Form.Control size=\"sm\" type=\"text\" placeholder={column} value={this.state.columnsFilters[column].filter} onChange={this.handleFilterColumnChange} onKeyPress={this.handleKeyPress} />\n\t\t  \t  \t\t  \t\t\t</Form></td>);\n\t  \t\t} \n\t\t\t\tcheckboxes.push(<Column key={column} columnName={column} onChange={this.handleColumnChange} defaultChecked={isVisible} />);\n  \t\t}\n  \t}\n\n  \treturn (\n  \t\t<Container fluid>\n\n\t    \t\t<Col sm={9}>\n\t  \t  \t\t<Button variant=\"outline-warning\" onClick={this.handleURLsVerifications} className=\"mt-2 mb-2 main\" >Test all</Button>\n\t    \t\t</Col>\n  \t\t<Row>\n    \t\t<Col sm={9}>\n    \t\t\t<Form>\n    \t\t\t\t{checkboxes}\n\t\t\t\t\t</Form>\n    \t\t</Col>\n  \t\t</Row>\n  \t\t<Row>\n\n\t  \t\t{this.state && this.state.msg && this.state.msg.length > 0 &&\n\t  \t\t\t<Alert variant=\"danger\" >{this.state.msg}</Alert>\n\t  \t\t}\n\n\t  \t\t<Col sm={12} >\n\t  \t\t\t<Table striped bordered hover responsive size=\"sm\" className=\"stubLinks\">\n\t\t  \t\t  <thead>\n\t\t  \t\t  <tr>\n\t\t\t\t  \t\t{header1}\n\t\t\t  \t\t  <td>\n\t\t\t\t\t  \t\t<Button variant=\"outline-info\" onClick={this.handleDNSVerifications} >Test</Button>\n\t\t\t  \t\t  </td>\n\t\t\t  \t\t  <td>\n\t\t\t\t\t  \t\t<Button variant=\"outline-info\" onClick={this.handleSSLVerifications} >Test</Button>\n\t\t\t\t  \t\t</td>\n\t\t\t  \t\t  <td>\n\t\t\t\t\t  \t\t<Button variant=\"outline-info\" onClick={this.handleRedirection} >Test</Button>\n\t\t\t\t  \t\t</td>\n\t\t  \t\t  </tr>\n\t\t  \t\t  <tr>\n\t\t\t\t  \t\t{header2}\n\t\t\t  \t\t  <td>DNS</td>\n\t\t\t  \t\t  <td>SSL validity</td>\n\t\t\t  \t\t  <td>Redirect</td>\n\t\t  \t\t  </tr>\n\t\t  \t\t  <tr>\n\t\t\t\t  \t\t{header3}\n\t\t\t  \t\t  <td>\n  \t\t  \t  \t\t<Form>\n  \t\t    \t\t    <Form.Control size=\"sm\" type=\"text\" placeholder=\"DNS & server\" value={cnameFilter} onChange={this.handleFilterCnameChange} onKeyPress={this.handleKeyPress} />\n  \t\t    \t\t  </Form>\n\t\t\t  \t\t  </td>\n\t\t\t  \t\t  <td>\n\t\t\t\t  \t\t</td>\n\t\t\t  \t\t  <td>\n  \t\t  \t  \t\t<Form>\n  \t\t    \t\t    <Form.Control size=\"sm\" type=\"text\" placeholder=\"Redirect\" value={redirectFilter} onChange={this.handleFilterRedirectChange} onKeyPress={this.handleKeyPress} />\n  \t\t    \t\t  </Form>\n\t\t\t\t  \t\t</td>\n\t\t  \t\t  </tr>\n\t\t  \t\t  </thead>\n\t\t\t  \t\t\t<URLList cnameFilter={cnameFilter} redirectFilter={redirectFilter} update={update} updateDNS={updateDNS} updateSSL={updateSSL} updateRedirection={updateRedirection} columnsFilters={columnsFilters} isadmin={this.props.isadmin} />\n\t\t  \t\t</Table>\n\t  \t\t</Col>\n  \t\t</Row>\n  \t\t</Container>\n\t\t);\n  }\n}\n\nexport default FilterableURLList;\n","import React from \"react\";\nimport { Navbar, Nav} from 'react-bootstrap';\n\nimport { Link} from 'react-router-dom'\nimport { useLocation } from \"react-router-dom\";\nimport Helper from \"./Helper\";\n\nconst Header = () => {\n    //assigning location variable\n    const location = useLocation();\n    var isAdmin = false;\n    if (Helper.isAdmin(location)) {\n      isAdmin = true;\n      console.log(\"isAdmin\");\n    }\n\n    return (\n      <Navbar expand=\"lg\" variant=\"dark\" bg=\"dark\">\n        <Navbar.Brand as={Link} to='/'>Rolex - URLs verification tool</Navbar.Brand>\n        <Navbar.Collapse>\n          <Nav>\n            <Nav.Link as={Link} className=\"link\" to=\"/isadmin\">Admin</Nav.Link>\n            {isAdmin &&\n              <Nav.Link as={Link} className=\"link\" to=\"/admin/add\">Add</Nav.Link>\n            }\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    )\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport DomainDataService from \"../services/domain.service\";\nimport Helper from \"../../components/Helper\";\nconst isValidDomain = require('is-valid-domain');\n\n//TODO : make comment a textarea\n// Merge the update & add\n// change the design a bit \n\nexport default class AddDomain extends Component {\n  constructor(props) {\n    super(props);\n    this.onChangeDomain = this.onChangeDomain.bind(this);\n    this.onChangeBrand = this.onChangeBrand.bind(this);\n    this.onChangeEnvironment = this.onChangeEnvironment.bind(this);\n    this.onChangeLive = this.onChangeLive.bind(this);\n    this.onChangeComment = this.onChangeComment.bind(this);\n    this.createNewDomain = this.createNewDomain.bind(this);\n    this.updateDomain = this.updateDomain.bind(this);\n    this.deleteDomain = this.deleteDomain.bind(this);\n    this.newDomain = this.newDomain.bind(this);\n\n    this.state = {\n      currentDomain: {\n        uuid: null,\n        domain: \"\",\n        brand: \"\",\n        environment: \"RC\",\n        live: \"N\",\n        comment: \"\"\n      },\n      validationMsg: \"\",\n      submitted: false\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.match.params.id) {\n      console.log(\"update page\");\n      this.setState({\n        validationMsg: \"\",\n        submitted: false,\n        isNew: false\n      });\n      this.loadDomain(this.props.match.params.id);\n    } else {\n      console.log(\"creation page\");\n      this.newDomain();\n    }\n  }\n\n  newDomain() {\n    this.setState({\n      currentDomain: {\n        uuid: null,\n        domain: \"\",\n        brand: \"\",\n        environment: \"RC\",\n        live: \"N\",\n        comment: \"\",\n      },\n\n      validationMsg: \"\",\n      submitted: false,\n      isNew: true\n    });\n  }\n\n  loadDomain(id) {\n    DomainDataService.get(id)\n      .then(response => {\n          this.setState({\n            currentDomain: response.data.Item\n          });\n        console.log(\"Getting item\", response.data.Item);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  validateAndCleanDomain(URL) {\n    // Check the domain is not empty\n    if (!URL) {\n      throw new Error(\"The domain should not be empty.\");\n    }\n\n    // clean the domain\n    URL = URL.toLowerCase();\n    URL = URL.trim();\n    \n    // remove trailing slash\n    URL = URL.replace(/\\/$/, \"\");\n\n    // check for https\n    if (!URL.startsWith(\"https://\")) {\n      throw new Error(\"[\"+URL+\"] should start with \\\"https://\\\".\");\n    }\n\n    // check if DNS is correct\n    var domain = URL.replace(\"https://\", \"\");\n    if (!isValidDomain(domain)) {\n      throw new Error(\"[\"+domain+\"] is not a valid domain name.\");\n    }\n\n    return URL;\n  }\n\n  validateBrand(brand) {\n    // Check the brand exists\n    if (!brand) {\n      throw new Error(\"The brand should not be empty.\");\n    }\n  }\n\n  validateAndCleanData() {\n    var URL = this.state.currentDomain.domain;\n\n    try {\n      URL = this.validateAndCleanDomain(URL);\n      this.validateBrand(this.state.currentDomain.brand);\n      \n      // Check the domain that the domain doesn't already exist in the DB\n      //TODO\n\n    } catch(e) {\n      console.log(e.message);\n      this.setState({\n        validationMsg: e.message\n      });\n      return null;\n    }\n\n    this.setState({\n      validationMsg: \"\"\n    });\n\n    var data = {\n      uuid: this.state.currentDomain.uuid ? this.state.currentDomain.uuid : Helper._randomstring(12),\n      domain: URL,\n      brand: this.state.currentDomain.brand.trim(),\n      environment: this.state.currentDomain.environment,\n      live: this.state.currentDomain.live,\n      comment: this.state.currentDomain.comment ? this.state.currentDomain.comment.trim() : \"\",\n    };\n\n    return data;\n  }\n\n  createNewDomain() {\n    var data = this.validateAndCleanData();\n    if (!data) {\n      console.log(\"No data - not creating anything\");\n      return;\n    }\n    console.log(\"Creating ...\", data);\n\n    DomainDataService.create(data)\n      .then(response => {\n        this.setState({\n          currentDomain: data,\n          submitted: true\n        });\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  updateDomain() {\n    var data = this.validateAndCleanData();\n    if (!data) {\n      console.log(\"No data - not creating anything\");\n      return;\n    }\n\n    console.log(\"Updating\", data, data.uuid);\n    DomainDataService.update(\n      data.uuid,\n      data\n    )\n      .then(response => {\n        console.log(response.data);\n        this.setState({\n          submitted: true,\n          message: \"The domain was updated successfully!\"\n        });\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  deleteDomain() {\n    console.log(\"Deleting domain\", this.state.currentDomain, this.state.currentDomain.uuid);\n    DomainDataService.delete(this.state.currentDomain.uuid)\n      .then(response => {\n        console.log(response.data);\n        this.props.history.push('/isadmin')\n        // this.setState({\n        //   message: \"The domain was deleted successfully!\"\n        // });\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  onChangeDomain(e) {\n    var currentDomain = this.state.currentDomain;\n    currentDomain.domain = e.target.value;\n    this.setState({\n      currentDomain: currentDomain\n    });\n  }\n  onChangeBrand(e) {\n    var currentDomain = this.state.currentDomain;\n    currentDomain.brand = e.target.value;\n    this.setState({\n      currentDomain: currentDomain\n    });\n  }\n  onChangeEnvironment(e) {\n    var currentDomain = this.state.currentDomain;\n    currentDomain.environment = e.target.value;\n    this.setState({\n      currentDomain: currentDomain\n    });\n  }\n  onChangeLive(e) {\n    var currentDomain = this.state.currentDomain;\n    currentDomain.live = e.target.value;\n    this.setState({\n      currentDomain: currentDomain\n    });\n  }\n  onChangeComment(e) {\n    var currentDomain = this.state.currentDomain;\n    currentDomain.comment = e.target.value;\n    this.setState({\n      currentDomain: currentDomain\n    });\n  }\n\n  render() {\n    const { currentDomain } = this.state;\n\n    return (\n      <div className=\"submit-form\">\n\n        {/* Validation */}\n        {this.state && this.state.validationMsg && \n          <div className=\"alert alert-danger\">{this.state.validationMsg}</div>\n        }\n\n        {/* Update: domain not found */}\n        {this.state && !this.state.isNew && (!currentDomain || !currentDomain.uuid) &&\n          <div className=\"alert alert-primary\"><b>The domain has not been found.</b></div>\n        }\n\n        {/* Creation ok */}\n        {this.state && this.state.isNew && this.state.submitted &&\n          <div>\n            <div className=\"alert alert-success\">The domain <b>\"{currentDomain.domain}\"</b> has been successfully created!</div>\n            <button className=\"btn btn-success\" onClick={this.newDomain}>\n              Add another\n            </button>\n          </div>\n        }\n\n        {/* Update ok */}\n        {this.state && !this.state.isNew && this.state.submitted &&\n          <div>\n            <div className=\"alert alert-success\">The domain <b>{currentDomain.domain}</b> has been successfully updated!</div>\n          </div>\n        }\n\n        {/* Display the form */}\n        {this.state && currentDomain && (!this.state.isNew || (this.state.isNew && !this.state.submitted)) &&\n          <div>\n            <div className=\"form-group\">\n              <label htmlFor=\"domain\">Domain</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"domain\"\n                required\n                defaultValue={currentDomain.domain}\n                onChange={this.onChangeDomain}\n                name=\"domain\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"brand\">Brand</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"brand\"\n                required\n                defaultValue={currentDomain.brand}\n                onChange={this.onChangeBrand}\n                name=\"brand\"\n              />\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"environment\">Environment</label>\n              <select \n                className=\"custom-select\" \n                id=\"environment\"\n                required\n                onChange={this.onChangeEnvironment}\n                name=\"environment\"\n                value={currentDomain.environment}\n                >\n                {Helper.getEnvironmentList().map((option) => (\n                  <option value={option}>{option}</option>\n                ))}\n              </select>\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"live\">Live</label>\n              <select \n                className=\"custom-select\" \n                id=\"live\"\n                required\n                onChange={this.onChangeLive}\n                name=\"live\"\n                defaultValue={currentDomain.live}\n                >\n                  <option value=\"N\">N</option>\n                  <option value=\"Y\">Y</option>\n              </select>\n            </div>\n            <div className=\"form-group\">\n              <label htmlFor=\"comment\">Comment</label>\n              <textarea name=\"comment\" id=\"comment\" className=\"form-control\" onChange={this.onChangeComment} defaultValue={currentDomain.comment} rows=\"6\">\n              </textarea>\n            </div>\n\n            {/* Creation validation button */}\n            {this.state && this.state.isNew && !this.state.submitted &&\n              <button onClick={this.createNewDomain} className=\"btn btn-success\">\n                Submit\n              </button>\n            }\n\n            {/* Update validation button */}\n            {this.state && !this.state.isNew &&\n              <>\n              <div className=\"deletebutton\" >\n                <button\n                  className=\"badge badge-danger mr-2\"\n                  onClick={this.deleteDomain}\n                >\n                  Delete\n                </button>\n              </div>\n              <div className=\"validatebutton\" >\n                <button\n                  type=\"submit\"\n                  className=\"badge badge-success\"\n                  onClick={this.updateDomain}\n                >\n                  Update\n                </button>\n              </div>\n              </>\n            }\n          </div>\n        }\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/bootstrap_darky.min.css';\nimport './css/rolex_url.css';\n\nimport Container from 'react-bootstrap/Container';\nimport FilterableURLList from './components/FilterableURLList';\nimport Header from './components/Header';\nimport AddDomain from \"./admin/components/add-domain.component\";\n// import Domain from \"./admin/components/domain.component\";\n// import DomainsList from \"./admin/components/domains-list.component\";\nimport \"./admin/App.css\";\n\nfunction App() {\n\n  // trim spaces when copying a text \n  React.useEffect(() => {\n    window.addEventListener('copy', function(e) {\n      const text_only = document.getSelection().toString().trim();\n      const clipdata = e.clipboardData || window.clipboardData;  \n      clipdata.setData('text/plain', text_only);\n      clipdata.setData('text/html', text_only);\n      e.preventDefault();\n    });\n  }, []);\n\n  const rolexURL = \n    <Container fluid>\n\n      <BrowserRouter>\n        <Header />\n        <Switch>\n            <Route exact path=\"/\" >\n              <FilterableURLList isadmin={false} />\n            </Route>\n            <Route exact path=\"/isadmin\" >\n              <FilterableURLList isadmin={true} />\n            </Route>\n            <Route exact path=\"/admin/add\" component={AddDomain} />\n            <Route path=\"/admin/update/:id\" component={AddDomain} />\n        </Switch>\n      </BrowserRouter>\n\n    </Container>\n  ;\n  return ReactDOM.render(rolexURL, document.getElementById('root'));\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
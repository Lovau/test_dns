{"version":3,"sources":["components/URLList.js","components/URL.js","data/Rolex_URL_working_copy.csv","components/FilterableURLList.js","App.js","reportWebVitals.js","index.js"],"names":["URLs","fetch","require","sslCertificate","URL","props","state","sgtin","getRandomSGTIN","url","domain","this","update","cname","getDNSDetails","length","hasCharacters","result","characters","charactersLength","i","charAt","Math","floor","random","_randomstring","includes","replace","a","Promise","resolve","reject","_removeDomainProtocol","then","res","json","Answer","data","catch","err","console","log","get","certificate","valid_to","fullURL","method","dnsExist","setState","getSSLExpiryDate","SSLExpiryDate","getRedirect","redirectWithoutSGTIN","redirectWithSGTIN","siteFilter","site","toLowerCase","environmentFilter","environment","domainFilter","React","Component","URLList","handleTriggerClick","bind","readCSV","urls","CSV","response","text","Papa","parse","header","skipEmptyLines","getURLs","Row","Col","sm","listUrls","map","Brand","Environment","FilterableURLList","handleTriggerVerification","handleFilterSiteChange","handleFilterEnvironmentChange","handleFilterDomainChange","e","target","value","span","offset","Button","variant","onClick","Table","striped","bordered","hover","responsive","size","className","Form","Control","type","placeholder","onChange","App","rolexURL","Container","fluid","Navbar","expand","bg","href","ReactDOM","render","document","getElementById","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.89037b4b.chunk.js","sourcesContent":["import React from \"react\";\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Papa from 'papaparse';\nimport URL from './URL';\n// import CSV from \"../data/urls.csv\";\nimport CSV from \"../data/Rolex_URL_working_copy.csv\";\n\nconst fetch = require('node-fetch');\nvar URLs;\n\nclass URLList extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n   //  this.state.urls[0] = {'domain': \"https://qru.aptamilessensis.com\", \"update\": false};\n   //  this.state.urls[1] = {'domain': \"https://qr.aptaclub.de\", \"update\": false};\n   //  this.state.urls[2] = {'domain': \"https://qrG.aptaclub.de\", \"update\": false};\n\n    this.handleTriggerClick = this.handleTriggerClick.bind(this);\n  }\n\n  async getURLs() {\n  \t// if (URLs && URLs.length > 0) {\n  \t// \treturn URLs;\n  \t// }\n  \tURLs = await this.readCSV();\n  \tfor (var i = 0; i < URLs.length; i++) {\n  \t\tURLs[i].update = false;\n  \t}\n\n    this.setState({\n    \turls: URLs\n    });\n  }\n\n  async readCSV() {\n  \treturn fetch(CSV)\n  \t  .then((response) => {\n  \t  \treturn response.text();\n  \t  })\n  \t  .then(text => {\n\t\t  \tvar results = Papa.parse(text, { header: true, skipEmptyLines: true }); // object with { data, errors, meta }\n  \t\t  var rows = results.data; // array of objects\n  \t\t  // console.log(\"Results, rows\", results, rows);\n  \t\t  return rows;\n  \t  });\n  }\n\n  componentDidMount() {\n    this.getURLs();\n  }\n\n  // componentDidUpdate() {\n  //   this.getURLs();\n  // }\n\n  handleTriggerClick() {\n  \tconsole.log(\"click !\");\n  \tvar urls = this.state.urls;\n  \tfor (var i = 0; i < urls.length; i++) {\n  \t\turls[i].update = true;\n  \t}\n  \tthis.setState({\n  \t\turls: urls\n  \t});\n  }\n\n  render() {\n  \tif (!this.state || !(\"urls\" in this.state) || this.state.urls.length < 1) {\n  \t\treturn (\n  \t\t\t<Row>\n\t  \t\t\t<Col sm={4}>\n\t  \t\t\t\tNo URLs provided.\n\t  \t\t\t</Col>\n\t  \t\t</Row>\n  \t\t);\n  \t}\n  \tvar domains = this.state.urls;\n\n  \tconst listUrls = domains.map((domain) => {\n  \t  return <URL key={domain.URL} \n\t\t\t\t  \t  \t\tsite={domain.Brand} \n\t\t\t\t  \t  \t\tenvironment={domain.Environment} \n\t\t\t\t  \t  \t\tdomain={domain.URL} \n\t\t\t\t  \t  \t\tupdate={this.props.update}\n\t\t\t\t  \t  \t\tsiteFilter={this.props.siteFilter}\n\t\t\t\t  \t  \t\tenvironmentFilter={this.props.environmentFilter}\n\t\t\t\t  \t  \t\tdomainFilter={this.props.domainFilter}\n\t\t  \t  \t\t/>\n  \t});\n\n  \treturn (\n  \t\t<tbody>\n\n  \t\t    {listUrls}\n  \t\t    </tbody>\n\n\t\t);\n  }\n}\n\nexport default URLList;\n","import React from \"react\";\nconst fetch = require('node-fetch');\n// const sslChecker = require(\"ssl-checker\");\n// const checkCertExpiration = require('check-cert-expiration');\nconst sslCertificate = require('get-ssl-certificate-next')\n\n// from: https://stackoverflow.com/questions/43262121/trying-to-use-fetch-and-pass-in-mode-no-cors\n// Generated with:\n// \tgit clone https://github.com/Rob--W/cors-anywhere.git\n// \tcd cors-anywhere/\n// \tnpm install\n// \theroku create\n// \tgit push heroku master\n// const CORS_PROXY = 'https://infinite-crag-06340.herokuapp.com/';\n\nclass URL extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n    \tsgtin: this.getRandomSGTIN()\n    };\n    this.state = {\n    \turl: props.domain + \"/\" + this.state.sgtin\n    };\n\n    // this.handleClick = this.handleClick.bind(this);\n  }\n\n  // handleClick() {\n  // \tif (! this.state.cname) {\n\t //  \tconsole.log(\"click !\");\n\t //  \tthis.getDNSDetails(this.props.domain);\n\t\t// }\n  // }\n\n  componentDidMount() {\n  \tif (this.props.update && !this.state.cname) {\n    \tthis.getDNSDetails(this.props.domain);\n  \t}\n  }\n  componentDidUpdate() {\n  \tif (this.props.update && !this.state.cname) {\n    \tthis.getDNSDetails(this.props.domain);\n  \t}\n  }\n\n\n  _randomstring(length, hasCharacters = true) {\n      var result           = '';\n      var characters       = '0123456789';\n      if (hasCharacters) {\n      \tcharacters += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n      }\n      var charactersLength = characters.length;\n      for ( var i = 0; i < length; i++ ) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n     }\n     return result;\n  }\n\n  getRandomSGTIN() {\n  \t// return '0' + this._randomstring(12, false) + '9' + this._randomstring(11, true);\n  \treturn this._randomstring(3, false);\n  }\n\n  _removeDomainProtocol(domain) {\n  \tif (domain.includes(\"https://\")) {\n  \t\t domain = domain.replace(\"https://\", \"\");\n  \t} else if (domain.includes(\"http://\")) {\n  \t\t domain = domain.replace(\"http://\", \"\");\n  \t} \n  \treturn domain;\n  }\n\n  async dnsExist(domain) {\n  \treturn new Promise((resolve, reject) => {\n\n  \t\tdomain = this._removeDomainProtocol(domain);\n\n  \t\tvar url = 'https://dns.google/resolve?name=' + domain;\n\n  \t\tfetch(url)\n\t\t    .then(res => res.json())\n\t\t    .then(json => {\n\t\t    \tif (json.Answer) {\n\t\t    \t\tvar cname = json.Answer[0].data;\n\t\t\t  \t\tresolve(cname);\n\t\t    \t}\n\t\t    \treject(json);\n\t\t    })\n\t\t    .catch(err => {\n\t\t    \tconsole.log(err);\n\t\t    \treject(err);\n\t\t    });\n  \t});\n  }\n\n  // getSSLExpiryDate(domain) {\n\t\t// domain = this._removeDomainProtocol(domain);\n\t\t// console.log(\"Getting SSL expiry date for \"+domain);\n\t\t// (async function () {\n\t //    try {\n  //       const { valid_to, daysLeft, host, port } = await checkCertExpiration('qru.aptamilessensis.com');\n  //       console.log(`${daysLeft} days until the certificate expires for ${host}:${port}`);\n\t\t// \t\tthis.setState({\n\t\t// \t\t\tSSLExpiryDate: valid_to\n\t\t// \t\t});\n\t\t// \t\treturn valid_to;\n\t //    } catch (err) {\n  //       console.error(`${err.name}:${err.message}`);\n  //       return err;\n\t //    }\n  //   })();\n  // }\n\n  // async getSSLExpiryDate(domain) {\n  // \treturn new Promise((resolve, reject) => {\n  // \t\tdomain = this._removeDomainProtocol(domain);\n  // \t\tconsole.log(\"SSL\",domain);\n  // \t\tsslChecker(domain, { method: \"GET\", port: 443 })\n  // \t\t\t.then((data) => {\n  // \t\t\t\tthis.setState({\n  // \t\t\t\t\tSSLExpiryDate: data.validTo\n  // \t\t\t\t});\n  // \t\t\t\tresolve(data.validTo);\n  // \t\t\t});\n  // \t});\n  // }\n  \n  async getSSLExpiryDate(domain) {\n  \treturn new Promise((resolve, reject) => {\n\t  \t\tdomain = this._removeDomainProtocol(domain);\n\n\t  \t\tsslCertificate.get(domain).then(function (certificate) {\n\t  \t\t\t// console.log(\"SSL expiry date for domain \"+domain+ \": \"+certificate.valid_to)\n\t\t\t\t\tresolve(certificate.valid_to);\n\t  \t\t})\n\t  \t\t.catch(err => {\n\t  \t\t\tconsole.log(\"SSL domain for \"+domain, err);\n\t  \t\t\treject(err);\n\t  \t\t});\n\t  });\n\t}\n\n\tasync getRedirect(fullURL) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfetch(fullURL, {\n\t\t\t\t\tmethod: 'GET', // The method\n\t\t\t\t})\n\t\t    .then(res => {\n\t\t\t    \t// console.log(\"Redirect for \"+fullURL+\" is: \"+ res.url, res);\n\t\t\t    \tresolve(res.url);\n\t\t    })\n\t\t    .catch(err => {\n\t\t    \tconsole.log(\"getRedirect err\", fullURL, err);\n\t\t    \treject(err);\n\t\t    });\n\t\t});\n\t}\n\n  async getDNSDetails(domain) {\n\n  \ttry {\n  \t\tvar cname = await this.dnsExist(domain);\n  \t\tthis.setState({\n  \t\t\tcname: cname\n  \t\t});\n  \t\t// console.log(domain + \": CNAME\", this.state.cname);\n\n\t\t\tif (cname) {\n\t  \t\ttry {\n\t\t  \t\tvar SSLExpiryDate = await this.getSSLExpiryDate(domain);\n\t\t  \t\tthis.setState({\n\t\t  \t\t\tSSLExpiryDate: SSLExpiryDate\n\t\t  \t\t});\n\t\t  \t\t// console.log(domain + \": SSL expiry Date\", SSLExpiryDate);\n\t  \t\t} catch (err) {\n\t  \t\t\tthis.setState({\n\t  \t\t\t\tSSLExpiryDate: \"Unable to get SSL\"\n\t  \t\t\t});\n\t  \t\t\tconsole.log(domain + \": Error\", err);\n\t  \t\t}\n\n\t  \t\ttry {\n\t  \t\t\t//TODO : test if http/https is there\n\t\t  \t\tvar redirectWithoutSGTIN = await this.getRedirect(domain);\n\t\t  \t\tif (redirectWithoutSGTIN === domain+\"/\") {\n\t\t  \t\t\tredirectWithoutSGTIN = \"No redirection\";\n\t\t  \t\t}\n\t\t  \t\tthis.setState({\n\t\t  \t\t\tredirectWithoutSGTIN: redirectWithoutSGTIN\n\t\t  \t\t});\n\t\t  \t\t// console.log(domain + \" redirects to \"+ redirectWithoutSGTIN);\n\t  \t\t} catch (err) {\n\t  \t\t\tthis.setState({\n\t  \t\t\t\tredirectWithoutSGTIN: \"Unable to get the redirection\"\n\t  \t\t\t});\n\t  \t\t\tconsole.log(domain + \": Error\", err);\n\t  \t\t}\n\n\t  \t\ttry {\n\t\t  \t\t//TODO : test if http/https is there\n\t\t  \t\tvar redirectWithSGTIN = await this.getRedirect(this.state.url);\n\t\t  \t\tif (redirectWithSGTIN === this.state.url) {\n\t\t  \t\t\tredirectWithSGTIN = \"No redirection\";\n\t\t  \t\t}\n\t\t  \t\tthis.setState({\n\t\t  \t\t\tredirectWithSGTIN: redirectWithSGTIN\n\t\t  \t\t});\n\t\t  \t\t// console.log(this.state.url + \" redirects to \"+ redirectWithSGTIN);\n\t  \t\t} catch (err) {\n\t\t  \t\tthis.setState({\n\t\t  \t\t\tredirectWithSGTIN: \"Unable to get the redirection\"\n\t\t  \t\t});\n\t  \t\t\tconsole.log(domain + \": Error\", err);\n\t  \t\t}\n\t  \t}\n\n  \t} catch (err) {\n  \t\tthis.setState({\n  \t\t\tcname: \"Doesn't exist\"\n  \t\t});\n  \t\tconsole.log(domain + \": Error\", err);\n  \t}\n  }\n\n  render() {\n\n  \tif (this.props.siteFilter.length > 0 && !(this.props.site.toLowerCase().includes(this.props.siteFilter.toLowerCase()))) {\n  \t\treturn null;\n  \t}\n  \tif (this.props.environmentFilter.length > 0 && !(this.props.environment.toLowerCase().includes(this.props.environmentFilter.toLowerCase()))) {\n  \t\treturn null;\n  \t}\n  \tif (this.props.domainFilter.length > 0 && !(this.state.url.toLowerCase().includes(this.props.domainFilter.toLowerCase()))) {\n  \t\treturn null;\n  \t}\n\n  \treturn (\n  \t\t<tr>\n  \t\t\t<td>{this.props.site}</td>\n  \t\t\t<td>{this.props.environment}</td>\n  \t\t\t<td>{this.props.domain}</td>\n  \t\t\t<td>{this.state.cname}</td>\n  \t\t\t<td>{this.state.SSLExpiryDate}</td>\n  \t\t\t<td>{this.state.redirectWithoutSGTIN}</td>\n  \t\t\t<td>{this.state.redirectWithSGTIN}</td>\n  \t\t</tr>\n\t);\n  }\n\n}\n\nexport default URL;\n","export default __webpack_public_path__ + \"static/media/Rolex_URL_working_copy.a3fd6124.csv\";","import React from \"react\";\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Table from 'react-bootstrap/Table';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport URLList from './URLList';\n\nclass FilterableURLList extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.handleTriggerVerification = this.handleTriggerVerification.bind(this);\n    this.handleFilterSiteChange = this.handleFilterSiteChange.bind(this);\n    this.handleFilterEnvironmentChange = this.handleFilterEnvironmentChange.bind(this);\n    this.handleFilterDomainChange = this.handleFilterDomainChange.bind(this);\n  }\n\n  handleFilterSiteChange(e) {\n  \tthis.setState({\n  \t\tsite: e.target.value\n  \t});\n  }\n  handleFilterEnvironmentChange(e) {\n  \tthis.setState({\n  \t\tenvironment: e.target.value\n  \t});\n  }\n  handleFilterDomainChange(e) {\n  \tthis.setState({\n  \t\tdomain: e.target.value\n  \t});\n  }\n\n  componentDidMount() {\n  \tthis.setState({\n  \t\tsite: '',\n  \t\tenvironment: '',\n  \t\tdomain: '',\n  \t\tupdate: false\n  \t});\n  }\n\n  handleTriggerVerification() {\n  \tthis.setState({\n  \t\tupdate: true\n  \t});\n  }\n\n  render() {\n  \tvar siteFilter = '';\n  \tif (this.state != null && 'site' in this.state) {\n  \t\tsiteFilter = this.state.site;\n  \t}\n  \tvar environmentFilter = '';\n  \tif (this.state != null && 'environment' in this.state) {\n  \t\tenvironmentFilter = this.state.environment;\n  \t}\n  \tvar domainFilter = '';\n  \tif (this.state != null && 'domain' in this.state) {\n  \t\tdomainFilter = this.state.domain;\n  \t}\n  \tvar update = false;\n  \tif (this.state != null && 'update' in this.state) {\n  \t\tupdate = this.state.update;\n  \t}\n\n  \treturn (\n  \t\t<Row>\n\t  \t\t<Col sm={{ span: 2, offset: 10 }}>\n\t\t  \t\t<Button variant=\"light\" onClick={this.handleTriggerVerification}>Verify the URLs</Button>\n\t  \t\t</Col>\n\n\t  \t\t<Col sm={12} >\n\t  \t\t\t<Table striped bordered hover responsive size=\"sm\" className=\"stubLinks\">\n\t\t  \t\t  <thead>\n\t\t  \t\t  <tr>\n\t\t\t  \t\t  <td>Site</td>\n\t\t\t  \t\t  <td>Environment</td>\n\t\t\t  \t\t  <td>Domain</td>\n\t\t\t  \t\t  <td>CNAME</td>\n\t\t\t  \t\t  <td>SSL expiry date</td>\n\t\t\t  \t\t  <td>Redirect without SGTIN</td>\n\t\t\t  \t\t  <td>Redirect with SGTIN</td>\n\t\t  \t\t  </tr>\n\t\t  \t\t  <tr>\n\t\t\t  \t\t  <td>\n\t\t  \t\t  \t\t<Form>\n\t\t  \t  \t\t    <Form.Control size=\"sm\" type=\"text\" placeholder=\"Site\" value={siteFilter} onChange={this.handleFilterSiteChange} />\n\t\t  \t  \t\t  </Form>\n\t\t\t  \t\t  </td>\n\t\t\t  \t\t  <td>\n  \t\t  \t  \t\t<Form>\n  \t\t    \t\t    <Form.Control size=\"sm\" type=\"text\" placeholder=\"Envt\" value={environmentFilter} onChange={this.handleFilterEnvironmentChange} />\n  \t\t    \t\t  </Form>\n\t\t\t  \t\t  </td>\n\t\t\t  \t\t  <td>\n  \t\t  \t  \t\t<Form>\n  \t\t    \t\t    <Form.Control size=\"sm\" type=\"text\" placeholder=\"Domain\" value={domainFilter} onChange={this.handleFilterDomainChange} />\n  \t\t    \t\t  </Form>\n\t\t\t  \t\t  </td>\n\t\t\t  \t\t  <td></td>\n\t\t\t  \t\t  <td></td>\n\t\t\t  \t\t  <td></td>\n\t\t\t  \t\t  <td></td>\n\t\t  \t\t  </tr>\n\t\t  \t\t  </thead>\n\t\t\t  \t\t\t<URLList siteFilter={siteFilter} environmentFilter={environmentFilter} domainFilter={domainFilter} update={update} />\n\t\t  \t\t</Table>\n\t  \t\t</Col>\n  \t\t</Row>\n\t\t);\n  }\n}\n\nexport default FilterableURLList;\n","import React from \"react\";\nimport ReactDOM from 'react-dom';\n\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/bootstrap_darky.min.css';\n\nimport Container from 'react-bootstrap/Container';\n\nimport Navbar from 'react-bootstrap/Navbar';\nimport FilterableURLList from './components/FilterableURLList';\n\n\nfunction App() {\n  const rolexURL = \n    <Container fluid>\n      <Navbar expand=\"lg\" variant=\"dark\" bg=\"dark\">\n        <Navbar.Brand href=\"#\">Rolex - URLs verification tool</Navbar.Brand>\n      </Navbar>\n\n      <FilterableURLList />\n\n    </Container>\n  ;\n  return ReactDOM.render(rolexURL, document.getElementById('root'));\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
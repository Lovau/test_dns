{"version":3,"sources":["components/URLList.js","components/Helper.js","components/URL.js","data/Rolex_URL_working_copy.csv","components/Column.js","components/FilterableURLList.js","App.js","reportWebVitals.js","index.js"],"names":["URLs","Helper","_randomstring","length","hasCharacters","result","characters","charactersLength","i","charAt","Math","floor","random","getRandomSGTIN","this","_removeDomainProtocol","domain","includes","replace","slice","getColumnsNames","isColumnAlwaysVisible","column","indexOf","fetch","require","cnameErrorMessage","serverUnknownMessage","SSLError","RedirectionError","NoRedirectionMessage","RolexExperienceMessage","API_DNS","API_SSL","API_REDIRECT","API_KEY","URL","props","state","updateInProgress","updateDNSInProgress","updateSSLInProgress","updateRedirWithSGTINInProgress","updateRedirWithoutSGTINInProgress","sgtin","url","update","cname","otherRecords","updateDNS","updateSSL","SSLExpiryDate","updateRedirection","redirects","redirectWithSGTIN","redirectWithoutSGTIN","setState","getRedirectionDetails","getSSLDetails","getDNSDetails","getAllURLDetails","a","Promise","resolve","reject","method","headers","then","res","json","body","catch","err","console","log","daysRemaining","fullURL","ok","msg","domainAndCnameData","dnsExist","response","CNAME","otherrecords","Error","server","cnameMapping","parentCallback","getSSLExpiryDate","getRedirect","redirect","display","trim","tdCnameClass","DNSContent","tdSSLClass","SSLContent","tdRedirectionClass","RedirectionContent","sameRedirectionsWithOrWithoutSGTIN","redirectionsWithSGTINisTheSameAsWithoutSGTIN","isRolex","redirectFilter","toLowerCase","value","td","columnsFilters","isVisible","push","className","dangerouslySetInnerHTML","__html","React","Component","URLList","domainsToCnames","handleCallback","bind","childData","readCSV","urls","CSV","text","Papa","parse","header","skipEmptyLines","data","getURLs","dns","cnameFilter","filter","Row","Col","sm","listUrls","map","URLisFiltered","Brand","Environment","Live","GeoDNS","Server","Column","toggleChange","isChecked","onChange","columnName","defaultChecked","Form","Check","type","id","label","messageFilterNeedsToBeActive","FilterableURLList","handleURLsVerifications","handleFilterColumnChange","handleFilterCnameChange","handleFilterRedirectChange","handleDNSVerifications","handleSSLVerifications","handleRedirection","handleColumnChange","e","key","preventDefault","target","placeholder","setUpdateToFalse","columns","site","environment","isFilterActive","checkboxes","header1","header2","header3","Control","size","onKeyPress","handleKeyPress","Container","fluid","Navbar","expand","variant","bg","href","Button","onClick","Alert","Table","striped","bordered","hover","responsive","App","useEffect","window","addEventListener","text_only","document","getSelection","toString","clipdata","clipboardData","setData","rolexURL","ReactDOM","render","getElementById","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"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","file":"static/js/main.aeddca0c.chunk.js","sourcesContent":["import React from \"react\";\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Papa from 'papaparse';\nimport URL from './URL';\n// import CSV from \"../data/urls.csv\";\nimport CSV from \"../data/Rolex_URL_working_copy.csv\";\nimport cnameMapping from \"../data/cname_mapping.json\";\nimport Helper from \"./Helper\";\n\nconst fetch = require('node-fetch');\nvar URLs;\n\nclass URLList extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    //  this.state.urls[0] = {'domain': \"https://qru.aptamilessensis.com\", \"update\": false};\n    //  this.state.urls[1] = {'domain': \"https://qr.aptaclub.de\", \"update\": false};\n    //  this.state.urls[2] = {'domain': \"https://qrG.aptaclub.de\", \"update\": false};\n    this.state = {\n     domainsToCnames: {}\n    };\n\n    this.handleCallback = this.handleCallback.bind(this);\n  }\n\n  handleCallback(childData) {\n    var domainsToCnames = { ...this.state.domainsToCnames, ...childData };\n\n    this.setState({\n      domainsToCnames: domainsToCnames\n    });\n  }\n\n  async getURLs() {\n  \t// if (URLs && URLs.length > 0) {\n  \t// \treturn URLs;\n  \t// }\n  \tURLs = await this.readCSV();\n  \tfor (var i = 0; i < URLs.length; i++) {\n  \t\tURLs[i].update = false;\n  \t}\n    this.setState({\n    \turls: URLs\n    });\n  }\n\n  async readCSV() {\n  \treturn fetch(CSV)\n  \t  .then((response) => {\n  \t  \treturn response.text();\n  \t  })\n  \t  .then(text => {\n\t\t  \tvar results = Papa.parse(text, { header: true, skipEmptyLines: true }); // object with { data, errors, meta }\n  \t\t  var rows = results.data; // array of objects\n  \t\t  // console.log(\"Results, rows\", results, rows);\n  \t\t  return rows;\n  \t  });\n  }\n\n  componentDidMount() {\n    this.getURLs();\n  }\n\n  URLisFiltered(domain) {\n\n    var dns = Helper._removeDomainProtocol(domain.URL);\n    if (this.props.cnameFilter.length > 0 \n      && \n        (!(dns in this.state.domainsToCnames) || !(this.state.domainsToCnames[dns].toLowerCase().includes(this.props.cnameFilter.toLowerCase())))\n        ) {\n        return true;\n    }\n\n    for (var column in this.props.columnsFilters) {\n      if (this.props.columnsFilters[column].isVisible \n          && this.props.columnsFilters[column].filter && this.props.columnsFilters[column].filter.length > 0\n          && !domain[column].toLowerCase().includes(this.props.columnsFilters[column].filter.toLowerCase())) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  render() {\n\n  \tif (!this.state || !(\"urls\" in this.state) || this.state.urls.length < 1) {\n  \t\treturn (\n  \t\t\t<Row>\n\t  \t\t\t<Col sm={4}>\n\t  \t\t\t\tNo URLs provided.\n\t  \t\t\t</Col>\n\t  \t\t</Row>\n  \t\t);\n  \t}\n\n    var redirectFilter = this.props.redirectFilter;\n    \n  \tconst listUrls = this.state.urls.map((domain) => {\n      \n      var update = this.props.update;\n      var updateDNS = this.props.updateDNS;\n      var updateSSL = this.props.updateSSL;\n      var updateRedirection = this.props.updateRedirection;\n      var display = true;\n      if (this.URLisFiltered(domain)) {\n        update = false;\n        updateDNS = false;\n        updateSSL = false;\n        updateRedirection = false;\n        display = false;\n      }\n\n      domain.URL = domain.URL.trim();\n      \n  \t  return <URL \n                  key={domain.URL}\n                  domain={domain.URL}\n                  Brand={domain.Brand}              // dynamic field\n                  Environment={domain.Environment}  // dynamic field\n                  URL={domain.URL}                  // dynamic field\n                  Live={domain.Live}                // dynamic field\n                  GeoDNS={domain.GeoDNS}            // dynamic field\n                  Server={domain.Server}            // dynamic field\n                  redirectFilter={redirectFilter}\n                  cnameMapping={cnameMapping}\n                  update={update}\n                  updateDNS={updateDNS}\n                  updateSSL={updateSSL}\n                  updateRedirection={updateRedirection}\n                  display={display}\n                  parentCallback={this.handleCallback}\n                  columnsFilters={this.props.columnsFilters}\n\t\t  \t  \t\t/>\n  \t});\n\n  \treturn (\n  \t\t<tbody>\n\t     {listUrls}\n\t    </tbody>\n\n\t\t);\n  }\n}\n\nexport default URLList;\n","const Helper = {\n\n  _randomstring(length, hasCharacters = true) {\n      var result           = '';\n      var characters       = '0123456789';\n      if (hasCharacters) {\n      \tcharacters += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n      }\n      var charactersLength = characters.length;\n      for ( var i = 0; i < length; i++ ) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n     }\n     return result;\n  },\n\n  getRandomSGTIN() {\n  \t// return '0' + this._randomstring(12, false) + '9' + this._randomstring(11, true);\n  \treturn this._randomstring(3, false);\n  },\n\n  _removeDomainProtocol(domain) {\n  \tif (domain.includes(\"https://\")) {\n  \t\t domain = domain.replace(\"https://\", \"\");\n  \t} else if (domain.includes(\"http://\")) {\n  \t\t domain = domain.replace(\"http://\", \"\");\n  \t} \n    if (domain.slice(domain.length - 1) === \"/\") {\n      domain = domain.slice(0, -1);\n    }\n  \treturn domain;\n  },\n\n  getColumnsNames() {\n    return [\n      \"Brand\",\n      \"Environment\",\n      \"URL\",\n      \"Live\",\n      \"GeoDNS\",\n      \"Server\",\n      // \"Redirect URL\",\n    ];\n  },\n\n  isColumnAlwaysVisible(column) {\n    var columnsVisible = [\n      \"Brand\",\n      \"Environment\",\n      \"URL\",\n    ];\n    if (columnsVisible.indexOf(column) !== -1) {\n      return true;\n    }\n    return false;\n  }\n};\n\nexport default Helper;\n","import React from \"react\";\nimport Helper from \"./Helper\";\n\nconst fetch = require('node-fetch');\n// const sslChecker = require(\"ssl-checker\");\n// const checkCertExpiration = require('check-cert-expiration');\n// const sslCertificate = require('get-ssl-certificate-next')\n\n\n// from: https://stackoverflow.com/questions/43262121/trying-to-use-fetch-and-pass-in-mode-no-cors\n// Generated with:\n// \tgit clone https://github.com/Rob--W/cors-anywhere.git\n// \tcd cors-anywhere/\n// \tnpm install\n// \theroku create\n// \tgit push heroku master\n// const CORS_PROXY = 'https://infinite-crag-06340.herokuapp.com/';\n\nconst cnameErrorMessage = \"Doesn't exist\";\nconst serverUnknownMessage = \"Unknown server\";\nconst SSLError = \"Unable to get SSL\";\nconst RedirectionError = \"Unable to get the redirection\";\nconst NoRedirectionMessage = \"No redirection\";\nconst RolexExperienceMessage = \"<span class='rolex-experience' >Rolex experience</span>\";\n\n// curl --location --request https://tj4k759l15.execute-api.eu-west-1.amazonaws.com/test/dnslookup?DNS=qrt.aptaclub.de --header 'x-api-key: 44XlITH2DCdahKjpe4401eT5070UwdK9xBFCJMR6'\nconst API_DNS = \"https://tj4k759l15.execute-api.eu-west-1.amazonaws.com/test/dnslookup?DNS=\";\nconst API_SSL = \"https://tj4k759l15.execute-api.eu-west-1.amazonaws.com/test/getsslexpirydate?DNS=\";\nconst API_REDIRECT = \"https://tj4k759l15.execute-api.eu-west-1.amazonaws.com/test/getredirect?URL=\";\nconst API_KEY = \"44XlITH2DCdahKjpe4401eT5070UwdK9xBFCJMR6\";\n\nclass URL extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n    \tupdateInProgress: false,\n    \tupdateDNSInProgress: false,\n    \tupdateSSLInProgress: false,\n    \tupdateRedirWithSGTINInProgress: false,\n    \tupdateRedirWithoutSGTINInProgress: false,\n    \tsgtin: Helper.getRandomSGTIN()\n    };\n\n    this.state = {\n    \turl: props.domain + \"/\" + this.state.sgtin\n    };\n  }\n\n  componentDidUpdate() {\n  \tif (this.props.update === true && !this.state.updateInProgress && !this.state.cname && !this.state.otherRecords) {\n  \t// || !this.state.SSLExpiryDate || !this.state.redirectWithSGTIN || !this.state.redirectWithoutSGTIN)) {\n  \t\n  \t\t// updateInProgress is here to avoid calling the update again while it is already called\n  \t\tthis.setState({\n  \t\t\tupdateInProgress: true,\n  \t\t\tupdateDNSInProgress: true,\n  \t\t\tupdateSSLInProgress: true,\n  \t\t\tupdateRedirWithSGTINInProgress: true,\n  \t\t\tupdateRedirWithoutSGTINInProgress: true,\n  \t\t});\n    \tthis.getAllURLDetails(this.props.domain);\n  \t}\n  \telse if (this.props.updateDNS === true && !this.state.updateDNSInProgress && !this.state.cname && !this.state.otherRecords) {\n  \t\tthis.setState({\n  \t\t\tupdateDNSInProgress: true,\n  \t\t});\n    \tthis.getDNSDetails(this.props.domain);\n  \t}\n  \telse if (this.props.updateSSL === true && !this.state.updateSSLInProgress && !this.state.SSLExpiryDate) {\n  \t\tthis.setState({\n  \t\t\tupdateSSLInProgress: true,\n  \t\t});\n    \tthis.getSSLDetails(this.props.domain);\n  \t}\n  \telse if (this.props.updateRedirection === true \n  \t\t\t\t\t\t&& !this.state.updateRedirWithoutSGTINInProgress\n  \t\t\t\t\t\t&& !this.state.updateRedirWithSGTINInProgress\n  \t\t\t\t\t\t&& (typeof this.state.redirects === \"undefined\" \n  \t\t\t\t\t\t\t\t|| typeof this.state.redirects.redirectWithSGTIN === \"undefined\"\n  \t\t\t\t\t\t\t\t|| typeof this.state.redirects.redirectWithoutSGTIN === \"undefined\")) {\n  \t\tthis.setState({\n  \t\t\tupdateRedirWithoutSGTINInProgress: true,\n  \t\t\tupdateRedirWithSGTINInProgress: true,\n  \t\t});\n    \tthis.getRedirectionDetails(this.props.domain);\n  \t}\n  }\n\n  async dnsExist(domain) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfetch(API_DNS+domain, {\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\theaders:  {\n\t\t\t\t\t\t'x-api-key': API_KEY\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t    .then(res => res.json())\n        .then(body => {\n        \tresolve(body);\n        })\n\t\t    .catch(err => {\n\t\t    \tconsole.log(\"getDNS err2\", API_DNS+domain, err);\n\t\t    \treject(err);\n\t\t    });\n\t\t});\n  }\n\n  async getSSLExpiryDate(domain) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfetch(API_SSL+domain, {\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\theaders:  {\n\t\t\t\t\t\t'x-api-key': API_KEY\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t    .then(res => res.json())\n        .then(body => {\n        \t\tif (!body.daysRemaining) {\n        \t\t\tconsole.log(\"getSSL err1\", API_SSL+domain, body);\n        \t\t\treturn reject(body);\n        \t\t}\n        \t\treturn resolve(body.daysRemaining);\n        \t})\n\t\t    .catch(err => {\n\t\t    \tconsole.log(\"getSSL err2\", API_SSL+domain, err);\n\t\t    \treject(err);\n\t\t    });\n\t\t});\n\t}\n\n\tasync getRedirect(fullURL) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfetch(API_REDIRECT+fullURL, {\n\t\t\t\t\tmethod: 'GET',\n\t\t\t\t\theaders:  {\n\t\t\t\t\t\t'x-api-key': API_KEY\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t    .then(res => {\n\t\t    \tif (!res.ok) {\n\t\t\t    \tconsole.log(\"getRedirect err\", API_REDIRECT+fullURL, \"Not a 200 response\");\n\t\t\t    \treject(res);\n\t\t    \t}\n\t\t    \treturn res.json();\n\t\t    })\n        .then(body => resolve(body))\n\t\t    .catch(err => {\n\t\t    \tconsole.log(\"getRedirect err\", API_REDIRECT+fullURL, err);\n\t\t    \treject(err);\n\t\t    });\n\t\t});\n\t}\n\n\t// TODO : if API error, handle it and display a dedicated error message. Or even allows to retry.\n  async getAllURLDetails(domain) {\n  \tawait this.getDNSDetails(domain);\n\n\t\tif ((this.state.cname || this.state.otherRecords) && this.state.cname !== cnameErrorMessage) {\n\t\t\tawait this.getSSLDetails(domain);\n  \t\tawait this.getRedirectionDetails(domain);\n  \t} else {\n  \t\tthis.setState({\n  \t\t\tSSLExpiryDate: SSLError,\n  \t\t\tredirects: {\n  \t\t\t\tredirectWithoutSGTIN: {\n  \t\t\t\t\tmsg: RedirectionError \n  \t\t\t\t},\n  \t\t\t\tredirectWithSGTIN: {\n  \t\t\t\t\tmsg: RedirectionError \n  \t\t\t\t},\n  \t\t\t}\n  \t\t});\n  \t}\n  \tthis.setState({\n  \t\tupdateInProgress: false,\n  \t\tupdateDNSInProgress: false,\n  \t\tupdateSSLInProgress: false,\n  \t\tupdateRedirWithoutSGTINInProgress: false,\n  \t\tupdateRedirWithSGTINInProgress: false,\n  \t});\n  }\n\n\n  // TODO: when no CNAME, check if the DNS exists with another record\n  async getDNSDetails(domain) {\n\t\tvar domainAndCnameData = {};\n\t\ttry {\n\t\t\tvar response = await this.dnsExist(Helper._removeDomainProtocol(domain));\n\t\t\tconsole.log(\"DNS response\", response);\n\t\t\tvar cname, otherRecords;\n\t\t\tif ('CNAME' in response && response.CNAME[0]) {\n\t\t\t\tcname = response.CNAME[0];\n\t\t\t} else if ('otherrecords' in response) {\n\t\t\t\totherRecords = response.otherrecords;\n\t\t\t} else {\n\t\t\t\tthrow Error(\"Record not found\");\n\t\t\t}\n\n\t\t\tthis.setState({\n\t\t\t\tcname: cname,\n\t\t\t\totherRecords: otherRecords\n\t\t\t});\n\n\t\t\tvar server;\n\t\t\tif (this.props.cnameMapping[cname]) {\n\t\t\t\t\tserver = this.props.cnameMapping[cname];\n\t\t\t} else if (this.props.cnameMapping[cname+\".\"]) {\n\t\t\t\t\tserver = this.props.cnameMapping[cname+\".\"];\n\t\t\t} else {\n\t\t\t\t\tserver = serverUnknownMessage;\n\t\t\t}\n\t\t\tthis.setState({\n\t\t\t\tserver: server\n\t\t\t});\n\t\t\tdomainAndCnameData[Helper._removeDomainProtocol(domain)] = cname + ' ' + server;\n\t\t\tthis.props.parentCallback(domainAndCnameData);\n\n\t\t} catch (err) {\n\t\t\tthis.setState({\n\t\t\t\tcname: cnameErrorMessage\n\t\t\t});\n\t\t\tdomainAndCnameData[Helper._removeDomainProtocol(domain)] = cnameErrorMessage;\n\t\t\tthis.props.parentCallback(domainAndCnameData);\n\t\t\tconsole.log(domain + \": Error\", err);\n\t\t}\n\n\t\tthis.setState({\n\t\t\tupdateDNSInProgress: false,\n\t\t});\n  }\n\n  async getSSLDetails(domain) {\n\t\ttry {\n\t\t\tvar SSLExpiryDate = await this.getSSLExpiryDate(Helper._removeDomainProtocol(domain));\n\t\t\tthis.setState({\n\t\t\t\tSSLExpiryDate: SSLExpiryDate\n\t\t\t});\n\t\t} catch (err) {\n\t\t\tthis.setState({\n\t\t\t\tSSLExpiryDate: SSLError\n\t\t\t});\n\t\t\tconsole.log(domain + \": Error\", err);\n\t\t}\n\n\t\tthis.setState({\n\t\t\tupdateSSLInProgress: false,\n\t\t});\n  }\n\n  async getRedirectionDetails(domain) {\n\t\ttry {\n\t\t\tvar redirects = {};\n\t\t\tredirects.redirectWithSGTIN = {};\n\t\t\tredirects.redirectWithSGTIN = await this.getRedirect(this.state.url);\n\t\t\tredirects.redirectWithSGTIN.msg = redirects.redirectWithSGTIN.redirect;\n\t\t\tif (redirects.redirectWithSGTIN.redirect === this.state.url) {\n\t\t\t\tredirects.redirectWithSGTIN.msg = NoRedirectionMessage;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tredirects.redirectWithSGTIN.msg = RedirectionError;\n\t\t\tconsole.log(domain + \": Error\", err);\n\t\t}\n\n\t\tthis.setState({\n\t\t\tupdateRedirWithSGTINInProgress: false,\n\t\t});\n\n\t\ttry {\n\t\t\tredirects.redirectWithoutSGTIN = {};\n\t\t\tredirects.redirectWithoutSGTIN = await this.getRedirect(domain);\n\t\t\tredirects.redirectWithoutSGTIN.msg = redirects.redirectWithoutSGTIN.redirect;\n\t\t\tif (redirects.redirectWithoutSGTIN.redirect === domain || redirects.redirectWithoutSGTIN.redirect === domain+\"/\" || redirects.redirectWithoutSGTIN.redirect + \"/\" === domain) {\n\t\t\t\tredirects.redirectWithoutSGTIN.msg = NoRedirectionMessage;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tredirects.redirectWithoutSGTIN.msg = RedirectionError;\n\t\t\tconsole.log(domain + \": Error\", err);\n\t\t}\n\n\t\tthis.setState({\n\t\t\tredirects: redirects,\n\t\t\tupdateRedirWithoutSGTINInProgress: false,\n\t\t});\n  }\n\n\n  redirectionsWithSGTINisTheSameAsWithoutSGTIN() {\n  \tif (!this.state.redirects.redirectWithoutSGTIN.redirect || this.state.redirects.redirectWithoutSGTIN.redirect.length < 1 || !this.state.redirects.redirectWithSGTIN.redirect || this.state.redirects.redirectWithSGTIN.redirect.length < 1 ) {\n  \t\treturn true;\n  \t}\n\n  \tif (this.state.redirects.redirectWithoutSGTIN.redirect === this.state.redirects.redirectWithSGTIN.redirect || this.state.redirects.redirectWithSGTIN.redirect.includes(this.state.redirects.redirectWithoutSGTIN.redirect)) {\n  \t\treturn true;\n  \t}\n  \treturn false;\n  }\n\n  render() {\n  \tif (!this.props.display) {\n  \t\treturn null;\n  \t}\n  \t// console.log(this.props, this.state.updateRedirWithoutSGTINInProgress);\n\n  \tvar domain = Helper._removeDomainProtocol(this.props.domain, this.state.url).trim();\n\n  \t// DNS cell\n  \tvar tdCnameClass = \"\";\n  \tvar DNSContent = this.state.cname;\n  \tif (this.state.updateDNSInProgress) {\n  \t\ttdCnameClass = \"updating\";\n  \t}\n  \tif (this.state.server === serverUnknownMessage) {\n  \t\ttdCnameClass = \"warningCell\";\n  \t} \n  \tif (this.state.cname === cnameErrorMessage) {\n  \t\ttdCnameClass = \"errorCell\";\n  \t}\n  \tif (\"server\" in this.state) {\n  \t\tDNSContent = (this.state.cname ? this.state.cname + \"<br/>\" : '') + this.state.server \n  \t}\n\n  \t// SSL cell\n  \tvar tdSSLClass = \"\";\n  \tvar SSLContent = \"\";\n  \tif (this.state.updateSSLInProgress) {\n  \t\ttdSSLClass = \"updating\";\n  \t}\n  \tif (this.state.SSLExpiryDate === SSLError) {\n  \t\ttdSSLClass = \"errorCell\";\n  \t\tSSLContent = SSLError\n  \t} else if (this.state.SSLExpiryDate < 40) {\n\t\t\ttdSSLClass = \"warningCell\";\n\t\t} else if (this.state.SSLExpiryDate) {\n\t\t\tSSLContent = this.state.SSLExpiryDate + \" days\";\n  \t}\n\n  \t// Redirection\n  \tvar tdRedirectionClass = \"\";\n  \tvar RedirectionContent = \"\";\n  \tvar sameRedirectionsWithOrWithoutSGTIN = true;\n  \tif (this.state.updateRedirWithoutSGTINInProgress) {\n  \t\ttdRedirectionClass = \"updating\";\n  \t}\n  \tif (typeof this.state.redirects !== \"undefined\"\n  \t\t\t&& typeof this.state.redirects.redirectWithoutSGTIN.redirect !== \"undefined\" \n  \t\t\t&& typeof this.state.redirects.redirectWithSGTIN.redirect !== \"undefined\") {\n  \t\t\n\n\n  \t\tsameRedirectionsWithOrWithoutSGTIN = this.redirectionsWithSGTINisTheSameAsWithoutSGTIN();\n\n\t  \tif (this.state.redirects.redirectWithoutSGTIN.msg === RedirectionError) {\n\t  \t\ttdRedirectionClass = \"errorCell\";\n\t  \t\tRedirectionContent = RedirectionError;\n\t\t\t} else {\n\t\t\t\tRedirectionContent = this.state.redirects.redirectWithoutSGTIN.msg;\n\t\t\t\tif (this.state.redirects.redirectWithoutSGTIN.isRolex) {\n\t\t\t\t\tRedirectionContent += \" - \"  + RolexExperienceMessage;\n\t\t\t\t}\n\t\t\t}\n\t  \tif (!sameRedirectionsWithOrWithoutSGTIN) {\n\t  \t\ttdRedirectionClass = \"warningCell\";\n\t  \t\tRedirectionContent = \"Without SGTIN: \"+ RedirectionContent+\"<br/>With SGTIN:\" + this.state.redirects.redirectWithSGTIN.msg;\n\t  \t\tif (this.state.redirects.redirectWithSGTIN.isRolex) {\n\t  \t\t\tRedirectionContent += \" - \"  + RolexExperienceMessage;\n\t  \t\t}\n\t  \t}\n  \t}\n\n  \t// Filter\n  \tif ('redirectFilter' in this.props\n  \t\t\t&& this.props.redirectFilter.length > 0 \n  \t\t\t&& (RedirectionContent.length < 1 || !RedirectionContent.toLowerCase().includes(this.props.redirectFilter.toLowerCase()))) {\n  \t\treturn '';\n  \t}\n\n  \tvar td = [];\n  \tvar value;\n  \tif (this.props && 'columnsFilters' in this.props) {\n\t\t\tfor (var column in this.props.columnsFilters) {\n\t  \t\tif (this.props.columnsFilters[column].isVisible) {\n\t  \t\t\tvalue = ''\n\t  \t\t\tif (column in this.props) {\n\t  \t\t\t\tvalue = this.props[column];\n\t  \t\t\t}\n\t  \t\t\ttd.push(<td key={column}>{value}</td>);\n\t  \t\t}\n\t\t\t}\n\t\t}\n  \treturn (\n  \t\t<tr>\n  \t\t\t{td}\n  \t\t\t<td className={tdCnameClass} dangerouslySetInnerHTML={{__html: DNSContent}}></td>\n  \t\t\t<td className={tdSSLClass}>{SSLContent}</td>\n  \t\t\t<td className={tdRedirectionClass} dangerouslySetInnerHTML={{__html: RedirectionContent}}></td>\n  \t\t</tr>\n\t\t);\n  }\n\n}\n\nexport default URL;\n","export default __webpack_public_path__ + \"static/media/Rolex_URL_working_copy.d85feaa7.csv\";","import React from \"react\";\nimport Form from 'react-bootstrap/Form';\n\nclass Column extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isChecked: this.props.defaultChecked,\n    };\n  }\n\n  toggleChange = () => {\n    this.setState({\n      isChecked: !this.state.isChecked,\n    });\n\n    this.props.onChange(this.props.columnName, !this.state.isChecked);\n  }\n\n  render() {\n  \treturn (\n      <Form.Check type='checkbox' id={this.props.columnName} label={this.props.columnName} defaultChecked={this.state.isChecked} onChange={this.toggleChange} />\n\t\t);\n  }\n}\n\nexport default Column;\n","import React from \"react\";\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Table from 'react-bootstrap/Table';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\nimport URLList from './URLList';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Container from 'react-bootstrap/Container';\nimport Helper from \"./Helper\";\nimport Column from \"./Column\";\n\nconst messageFilterNeedsToBeActive = \"Too many URLs to proceed, please use the filters below first. If too many requests are triggered at the same time, some results may be wrong.\";\n\nclass FilterableURLList extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.handleURLsVerifications = this.handleURLsVerifications.bind(this);\n    this.handleFilterColumnChange = this.handleFilterColumnChange.bind(this);\n    this.handleFilterCnameChange = this.handleFilterCnameChange.bind(this);\n    this.handleFilterRedirectChange = this.handleFilterRedirectChange.bind(this);\n\n    this.handleDNSVerifications = this.handleDNSVerifications.bind(this);\n    this.handleSSLVerifications = this.handleSSLVerifications.bind(this);\n    this.handleRedirection = this.handleRedirection.bind(this);\n\n    this.handleColumnChange = this.handleColumnChange.bind(this);\n  }\n\n  handleKeyPress(e) {\n  \tif (e.key === 'Enter') {\n  \t\te.preventDefault();\n  \t}\n  }\n\n  handleFilterColumnChange(e) {\n  \tvar columnName = e.target.placeholder;\n  \tvar columnsFilters = this.state.columnsFilters;\n  \tcolumnsFilters[columnName].filter = e.target.value;\n  \tthis.setState({\n  \t\tcolumnsFilters: columnsFilters\n  \t})\n  \tthis.setUpdateToFalse();\n  }\n\n  handleFilterCnameChange(e) {\n  \tthis.setState({\n  \t\tcname: e.target.value,\n  \t\tmsg: '',\n  \t});\n  \tthis.setUpdateToFalse();\n  }\n\n  handleFilterRedirectChange(e) {\n  \tthis.setState({\n  \t\tredirectFilter: e.target.value,\n  \t\tmsg: '',\n  \t});\n  \tthis.setUpdateToFalse();\n  }\n\n  handleColumnChange(columnName, isVisible) {\n  \tvar columnsFilters = this.state.columnsFilters;\n  \tcolumnsFilters[columnName] = {\n  \t\tisVisible: isVisible,\n  \t\tfilter: '',\n  \t};\n  \tthis.setState({\n  \t\tcolumnsFilters: columnsFilters\n  \t});\n  \tthis.setUpdateToFalse();\n  }\n\n  componentDidMount() {\n  \tvar columns = Helper.getColumnsNames();\n  \tvar columnsFilters = [];\n  \tfor (var i = 0; i < columns.length; i++) {\n  \t\tcolumnsFilters[columns[i]] = {\n\t  \t\tisVisible: Helper.isColumnAlwaysVisible(columns[i]),\n\t  \t\tfilter: '',\n\t  \t};\n  \t}\n  \tthis.setState({\n  \t\tcolumnsFilters: columnsFilters,\n  \t\tsite: '',\n  \t\tenvironment: '',\n  \t\tdomain: '',\n  \t\tcname: '',\n  \t\tmsg: '',\n  \t});\n  \tthis.setUpdateToFalse();\n  }\n\n  isFilterActive() {\n  \tfor (var column in this.state.columnsFilters) {\n  \t\tif (this.state.columnsFilters[column].isVisible \n  \t\t\t\t&& this.state.columnsFilters[column].filter \n  \t\t\t\t&& this.state.columnsFilters[column].filter.length > 0) {\n  \t\t\treturn true;\n  \t\t}\n  \t}\n  \treturn false;\n  }\n\n  setUpdateToFalse() {\n  \tthis.setState({\n  \t\tupdate: false,\n  \t\tupdateDNS: false,\n  \t\tupdateSSL: false,\n  \t\tupdateRedirection: false,\n  \t});\n  }\n\n  handleURLsVerifications() {\n  \tif (!this.isFilterActive()) {\n  \t\tthis.setState({\n  \t\t\tmsg: messageFilterNeedsToBeActive\n  \t\t});\n  \t\treturn;\n  \t}\n  \tthis.setState({\n  \t\tupdate: true\n  \t});\n  }\n  handleDNSVerifications() {\n  \tif (!this.isFilterActive()) {\n  \t\tthis.setState({\n  \t\t\tmsg: messageFilterNeedsToBeActive\n  \t\t});\n  \t\treturn;\n  \t}\n  \tthis.setState({\n  \t\tupdateDNS: true\n  \t});\n  }\n  handleSSLVerifications() {\n  \tif (!this.isFilterActive()) {\n  \t\tthis.setState({\n  \t\t\tmsg: messageFilterNeedsToBeActive\n  \t\t});\n  \t\treturn;\n  \t}\n  \tthis.setState({\n  \t\tupdateSSL: true\n  \t});\n  }\n  handleRedirection() {\n  \tif (!this.isFilterActive()) {\n  \t\tthis.setState({\n  \t\t\tmsg: messageFilterNeedsToBeActive\n  \t\t});\n  \t\treturn;\n  \t}\n  \tthis.setState({\n  \t\tupdateRedirection: true\n  \t});\n  }\n\n  render() {\n  \tvar cnameFilter = '';\n  \tif (this.state != null && 'cname' in this.state) {\n  \t\tcnameFilter = this.state.cname;\n  \t}\n  \tvar redirectFilter = '';\n  \tif (this.state != null && 'redirectFilter' in this.state) {\n  \t\tredirectFilter = this.state.redirectFilter;\n  \t}\n  \tvar update = false;\n  \tif (this.state != null && 'update' in this.state) {\n  \t\tupdate = this.state.update;\n  \t}\n  \tvar updateDNS = false;\n  \tif (this.state != null && 'updateDNS' in this.state) {\n  \t\tupdateDNS = this.state.updateDNS;\n  \t}\n  \tvar updateSSL = false;\n  \tif (this.state != null && 'updateSSL' in this.state) {\n  \t\tupdateSSL = this.state.updateSSL;\n  \t}\n  \tvar updateRedirection = false;\n  \tif (this.state != null && 'updateRedirection' in this.state) {\n  \t\tupdateRedirection = this.state.updateRedirection;\n  \t}\n\n\n  \tvar checkboxes = [];\n  \tvar header1 = [];\n  \tvar header2 = [];\n  \tvar header3 = [];\n  \tvar columnsFilters = [];\n  \tif (this.state && 'columnsFilters' in this.state) {\n  \t\tcolumnsFilters = this.state.columnsFilters;\n  \t\tfor (var column in this.state.columnsFilters) {\n  \t\t\tvar isVisible = this.state.columnsFilters[column].isVisible;\n\t  \t\tif (isVisible) {\n\t  \t\t\theader1.push(<td key={column}></td>);\n\t  \t\t\theader2.push(<td key={column}>{column}</td>);\n\t  \t\t\theader3.push(<td key={column}><Form>\n\t\t  \t  \t\t    \t\t\t<Form.Control size=\"sm\" type=\"text\" placeholder={column} value={this.state.columnsFilters[column].filter} onChange={this.handleFilterColumnChange} onKeyPress={this.handleKeyPress} />\n\t\t  \t  \t\t  \t\t\t</Form></td>);\n\t  \t\t} \n\t\t\t\tcheckboxes.push(<Column key={column} columnName={column} onChange={this.handleColumnChange} defaultChecked={isVisible} />);\n  \t\t}\n  \t}\n\n  \treturn (\n  \t\t<Container fluid>\n\n  \t\t<Navbar expand=\"lg\" variant=\"dark\" bg=\"dark\">\n  \t\t  <Navbar.Brand href=\"#\">Rolex - URLs verification tool</Navbar.Brand>\n\t    \t\t<Col sm={9}>\n\t  \t  \t\t<Button variant=\"outline-warning\" onClick={this.handleURLsVerifications} className=\"mt-2 mb-2 main\" >Test all</Button>\n\t    \t\t</Col>\n  \t\t</Navbar>\n  \t\t<Row>\n    \t\t<Col sm={9}>\n    \t\t\t<Form>\n    \t\t\t\t{checkboxes}\n\t\t\t\t\t</Form>\n    \t\t</Col>\n  \t\t</Row>\n  \t\t<Row>\n\n\t  \t\t{this.state && this.state.msg && this.state.msg.length > 0 &&\n\t  \t\t\t<Alert variant=\"danger\" >{this.state.msg}</Alert>\n\t  \t\t}\n\n\t  \t\t<Col sm={12} >\n\t  \t\t\t<Table striped bordered hover responsive size=\"sm\" className=\"stubLinks\">\n\t\t  \t\t  <thead>\n\t\t  \t\t  <tr>\n\t\t\t\t  \t\t{header1}\n\t\t\t  \t\t  <td>\n\t\t\t\t\t  \t\t<Button variant=\"outline-info\" onClick={this.handleDNSVerifications} >Test</Button>\n\t\t\t  \t\t  </td>\n\t\t\t  \t\t  <td>\n\t\t\t\t\t  \t\t<Button variant=\"outline-info\" onClick={this.handleSSLVerifications} >Test</Button>\n\t\t\t\t  \t\t</td>\n\t\t\t  \t\t  <td>\n\t\t\t\t\t  \t\t<Button variant=\"outline-info\" onClick={this.handleRedirection} >Test</Button>\n\t\t\t\t  \t\t</td>\n\t\t  \t\t  </tr>\n\t\t  \t\t  <tr>\n\t\t\t\t  \t\t{header2}\n\t\t\t  \t\t  <td>DNS</td>\n\t\t\t  \t\t  <td>SSL validity</td>\n\t\t\t  \t\t  <td>Redirect</td>\n\t\t  \t\t  </tr>\n\t\t  \t\t  <tr>\n\t\t\t\t  \t\t{header3}\n\t\t\t  \t\t  <td>\n  \t\t  \t  \t\t<Form>\n  \t\t    \t\t    <Form.Control size=\"sm\" type=\"text\" placeholder=\"DNS & server\" value={cnameFilter} onChange={this.handleFilterCnameChange} onKeyPress={this.handleKeyPress} />\n  \t\t    \t\t  </Form>\n\t\t\t  \t\t  </td>\n\t\t\t  \t\t  <td>\n\t\t\t\t  \t\t</td>\n\t\t\t  \t\t  <td>\n  \t\t  \t  \t\t<Form>\n  \t\t    \t\t    <Form.Control size=\"sm\" type=\"text\" placeholder=\"Redirect\" value={redirectFilter} onChange={this.handleFilterRedirectChange} onKeyPress={this.handleKeyPress} />\n  \t\t    \t\t  </Form>\n\t\t\t\t  \t\t</td>\n\t\t  \t\t  </tr>\n\t\t  \t\t  </thead>\n\t\t\t  \t\t\t<URLList cnameFilter={cnameFilter} redirectFilter={redirectFilter} update={update} updateDNS={updateDNS} updateSSL={updateSSL} updateRedirection={updateRedirection} columnsFilters={columnsFilters} />\n\t\t  \t\t</Table>\n\t  \t\t</Col>\n  \t\t</Row>\n  \t\t</Container>\n\t\t);\n  }\n}\n\nexport default FilterableURLList;\n","import React from \"react\";\nimport ReactDOM from 'react-dom';\n\n// import 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/bootstrap_darky.min.css';\nimport './css/rolex_url.css';\n\nimport Container from 'react-bootstrap/Container';\n\nimport FilterableURLList from './components/FilterableURLList';\n\n\nfunction App() {\n\n\n  // trim spaces when copying a text \n  React.useEffect(() => {\n    window.addEventListener('copy', function(e) {\n      const text_only = document.getSelection().toString().trim();\n      const clipdata = e.clipboardData || window.clipboardData;  \n      clipdata.setData('text/plain', text_only);\n      clipdata.setData('text/html', text_only);\n      e.preventDefault();\n    });\n  }, []);\n\n  const rolexURL = \n    <Container fluid>\n      <FilterableURLList />\n\n    </Container>\n  ;\n  return ReactDOM.render(rolexURL, document.getElementById('root'));\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}